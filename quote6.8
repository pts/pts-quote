; -*- coding: utf-8 -*-
;
; quote6.8: PotterSoftware Quote Displayer V2.62 (A86 3.22 .. 4.05 source code)
; (C) 22 September 1996 by EplPáj of PotterSoftware, Hungary
;
; Compile it with A86 3.22 .. 4.05 on DOS, generate quote6.com: a86 quote6.8
;
; Reproduces the original quote6.com.orig (794 bytes).
;
; This source file is for archival purposes only.
; Bugfixes and features shouldn't be added to this file, but to quote63.nasm.
;
;I read from quote.txt, and I read/write/keep quote.idx in the current dir.
;
;If you do not specify the command line parameter, first I check for .idx If
;I can't find it, I generate it. Then using up the .idx I display a random
;quote from .txt in the speed of light.
;
;If you give parameter "i", I'll create the .idx and quit immediately without
;echoing anything to the screen.
;
;You can either give the parameter "id" or "di". If you do this, I'll first
;(re)generate the .idx regardless it exists or not, then I display a quote.
;
;And last, specifying the parameter "slow", I display the quote without
;touching the .idx file. Of course it's *very* slow unless you've a .txt file
;smaller than 64K.
;
;I require an IBM compatible PC/AT computer, I can even work on a 286, but
;unfurtunately the XT is not supported. I need exactly 64K free conventional
;memory. No matter ANSI.SYS is loaded or not. I can only produce nice
;text-mode graphics in 80-column modes. I need DOS 2.0 or later; DOSBox and
;FreeDOS also work.
;
;My error codes are not documentated, however, I give back the same errorlevel
;for the same error. Now the errors may be file i/o and line-too-long.
;
; Limits (all unchecked):
;
; * minimum quote size: 5 bytes (1 byte of text + CRLF + CRLF)
; * maximum quote size: 4096 bytes including the trailing CRLF (longer than
;   a screen)
; * minimum number of quotes: 1
; * maximum number of quotes: 65535
; * minimum quote.txt file size: 5 bytes (1 quote)
; * maximum quote.txt file size: 55 MiB == 55 << 20 bytes
; * quote.idx file size = 2 + ceil(number_of_quotes / 1024.0) bytes
; * minimum quote.idx file size: 2 + 1 == 3 bytes
; * maximum quote.idx file size: 2 + (55 << 10) == 56322 bytes
;
; Memory layout:
;
; * 0...0x80: PSP (Program Segment Prefix), populated by DOS.
; * 0x80...0x100: String containing command-line arguments, populated by DOS.
;   It starts with the 8-bit variable named `param'.
; * 0xf0...0xf2 (2 bytes): Variable named qqqqw. Overlaps command-line
;   arguments.
; * 0xf2...0xf4 (2 bytes): Variable named qqqqbefore. Overlaps command-line
;   arguments.
; * 0x100... (at most 3840 bytes): .com file (code and data) loaded by DOS.
;   Entry point is at the beginning, has label _start for convenience.
; * 0x1000...0x1800 (2048 bytes): Variable named buffer, file preread buffer.
;   When reading our quote, it continues and overlaps idxchw, idxc and index.
; * 0x1800...0x1802 (2 bytes): Variable named idxc, contains total number of
;   quotes. First 2 bytes of the quote.idx file.
; * 0x1802...0xf402 (56320 bytes): Array variable named index, index entries:
;   each byte contains the total number of quotes whose first byte is in the
;   corresponding 1024-byte block of quote.txt. Remaining bytes of the
;   quote.idx file.
; * 0xf402...0x10000 (3070 bytes): Stack, it grows from high to low offsets.
;   Before jumping to 0x100, DOS pushes the exit address 0 within the PSP
;   (containing an `int 20h' instruction), so that a simple `ret' will exit
;   the program.
;

;;org 0100h
;;bits 16
;;cpu 286  ; Some instructions below (such as higher-than-1 bit shifts) need 286.

;=======Size-measuring constants.
	_bss= 1000h
	buflen= 2048
	idxlen= 55*1024  ; 55 KiB.
	quote_max= 4096  ; All quotes must be shorter than this. For compatibility with earlier versions.

;=======Uninitialized data (_bss).
	buffer= [_bss]w			;quote.txt file preread buffer. It overlaps idxc and index when reading our quote.
	idxc=   [_bss+buflen]w		;Total number of quotes.
	index=  [_bss+buflen+2]w	;Index table: 1 byte for each 1024-byte block of quote.txt.
	qqqqw=  [0F0h]w
	param=  [080h]b
	qqqqbefore= [0F2h]w

;=======Code (_code).
_start:
	xor bx, bx
	mov idxc, bx

	cmp param, 2
	je l18
	mov ax, 0E0Dh
	int 10h				;BH=0, Writeln.
	mov al, 00Ah
	int 10h
	mov si, offset headermsg	;Print blue header message.
	call header

l18:	mov ax, 3D00h
	mov dx, offset txtfn
	int 21h				;Open .txt file quote.txt.
	if c call error
	push ax				;Save .txt filehandle.

	mov ax, 3D00h
	mov dx, offset idxfn
	int 21h				;Open index file quote.idx.
	mov dl, param
	adc dl, 0
	jnz gen
	
;=======Reads the index file quote.idx.
	mov bx, ax
	mov ah, 3Fh
	mov cx, idxlen+2
	mov dx, offset idxc
	int 21h
	mov ah, 3Eh
	int 21h
	pop bx				;Restore .txt filehandle.
	jmp l5

;=======Starts generating the index file quote.idx.
gen:	pop bx				;Restore .txt filehandle.
	mov si, offset buffer
	mov di, offset index
	mov bp, 0A0Dh
	mov [si], bp			;First few bytes must not be 13, 10, 13, 10.
	mov [si+2], bp

l2:	mov ah, 3Fh			;Read next 1024-byte block.
	mov cx, 1024
	mov dx, offset buffer+4
	int 21h
	mov cx, ax
	jcxz l1
	mov al, 0			;Number of quotes in this block.

l4:	cmp [si], bp
	jne l3
	cmp [si+2], bp
	jne l3
	cmp b[si+4], 13
	if e call error
	inc idxc			;Count the quote as total.
	inc ax				;Count the quote within the block.
l3:	inc si
	loop l4

	stosb				;Add byte for current block to index.
	lodsw
	mov [offset buffer], ax
	lodsw
	mov [offset buffer+2], ax
	mov si, offset buffer
	cmp di, idxlen
	jne l2
	push di				;Push error code. Error: quote.txt too long, index full.

error:  mov al, 7			;General error message.
	int 29h				;Beep.
	pop ax				;Get code address of error, and
	mov ah, 4Ch			;give it back as errorlevel.
	int 21h				;Exit to DOS.

l1:	cmp param, 5
	je l19
	push bx				;Save .txt filehandle.
	mov ah, 3Ch
	xor cx, cx			;Creates with attributes = 0.
	mov dx, offset idxfn
	int 21h				;Open index file quote.idx for writing.
	if c call error
	mov bx, ax
	mov ah, 40h
	lea cx, [di-offset idxc]	;CX := DI-ofs(index) == sizeof_index.
	mov dx, offset idxc
	int 21h				;Write to index file.
	mov ah, 3Eh
	int 21h				;Close index file.
	pop bx				;Restore .txt filehandle.
l19:	cmp param, 2
	if e ret			;Exit to DOS with int 20h.

;=======Continues after quote.idx has been read or generated.
l5:

;=======Generates 32-bit random seed in DX:AX. Clobbers flags, BP, BX, CX.
	mov ah, 0			;Read system clock counter to CX:DX.
	int 1Ah
	push bx				;Save handle of quote.txt.
	xor bp, bp
	mov ax, cs
	add ax, dx			;Modify seed.
	mov bx, ax
	mov dx, 8405h
	mul dx
	shl bx, 3
	add ch, cl
	add dx, bx
	add dx, cx
	shl cx, 2
	add dx, cx
	add dh, bl
	shl cx, 5
	add ax, 1			;Modifies CF (inc ax doesn't). `strict word' to make `nasm -O0' and `nasm -O9' the same.
	adc dx, bp			;(DX:AX) += (0, 1). BP is 0.
	; Now DX:AX is a 32-bit random number.

;=======Generates random DX:=random(idxc) from random seed DX:AX.
;       Assumes BP==0. Clobbers flags, AX, BX.
	mov bx, dx
	mul idxc
	mov ax, bx
	mov bx, dx
	mul idxc
	add ax, bx
	adc dx, bp			;DX:=random(idxc). BP is 0.

;=======Finds block index (as SI-offset index) of the quote with index DX.
	pop bx				;Restore handle of quote.txt.
	mov si, offset index
	mov ah, 0
l7:	lodsb
	cmp dx, ax
	js l6
	sub dx, ax
	jmp l7

;=======Seeks to the block of our quote with index DX.
l6:	sub si, offset index+2		;SI := 1024-byte block index.
	push dx				;DX = quote index within block.
	mov bp, 0A0Dh
	mov ax, 4200h
	jns l8
	xor dx, dx			;Our quote is in block 0, seeks to the beginning.
	xor cx, cx
	int 21h
	mov dx, offset buffer+1024
	mov w buffer[1024-4], bp
	mov w buffer[1024-2], bp
	jmp l20
l8:	mov dx, si
	shl dx, 10
	mov cx, si
	shr cx, 6
	int 21h				;Seek to 1024 * SI, to the beginning of the previous block.
	mov dx, offset buffer

;=======Reads the blocks containing our quote.
l20:	mov ah, 3Fh
	mov cx, quote_max		;Reads this many bytes.
	; Bug: this trailing CRLF + CRLF (bp + bp) should be put after
	; read read_size (in ax above), not after quote_max bytes.
	mov buffer[quote_max], bp	;Append sentinel CRLF + CRLF.
	mov buffer[quote_max+2], bp
	int 21h				;Read from .txt file.
	mov ah, 3Eh
	int 21h				;Close .txt file.

	pop ax				;AX := quote index within block.
	mov di, offset buffer+1020-1
l21:	inc di
	cmp [di], bp
	jne l21
	cmp [di+2], bp
	jne l21
	dec ax
	jns l21
	add di, 4			;DI:=offset(our_quote).

;=======Prints our quote.
	mov ax, 00EDAh
	mov bx, 0BFh			;'┌┐'.
	call pline			;Draw the top side of the frame.

lld:    mov cx, 79
	mov al, 13			;CR.
	lea si, [di-1]
	repnz scasb			;Seek CR using DI.
	if nz call error		;Line too long.
	sub cx, 79			;Now: byte[di-1] == 10 (LF).
	inc cx				;Replacing inc+neg by not wouldn't change ZF.
	neg cx				;CX := length(line); without CR.
	jnz y91

;=======Empty line: prints foooter and exits.
lle:	mov ax, 00EC0h
	mov bx, 0D9h			;'└┘'.
	call pline			;Draw the bottom side of the frame.
	mov si, offset footermsg
	call header
	mov bx, 7			;Print blue footer message.
	call fillc
	ret				;Exit to DOS with int 20h.

y91:    inc di
	mov [si], cl			;Set length of Pascal string.

;=======Prints the Pascal string starting at SI with the correct color & alignment
;       according to the control codes found at [SI] and [SI+1]. Keeps DI intact.
	; Calculate the value of BEFORE first using up AnsiCh:
	; #0=Left '-'=Right '&'=Center alignment.
	mov qqqqw, si
	lodsb				;AL:=length(s), AL<>0.
	mov dl, 0			;AnsiCh=dl is 0 by default.
	cmp byte ptr [si], '-'
	jne yc
	add qqqqw, 2			;If AnsiCh!=0, skip first 2 characters (-- or -&).
	dec ax
	dec ax
	mov dx, ax
	xchg [si+1], dl			;Copy Pascal string length to the next byte, get new AnsiCh.
yc:     mov ah, 0
	mov bx, 78
	mov cx, 15
	cmp dl, 0
	jne ya
	mov al, 0
	xor bx, bx
	mov cx, 7
	jmp yb
ya:     cmp dl, '&'
	jne yb
	mov bx, 39
	shr ax, 1
	mov cx, 10
yb:     sub bx, ax
	mov qqqqbefore, bx
	mov ax, 0Eh*256+0b3h		;'│' Start the line.
	mov bh, 0
	int 10h
	mov bx, cx
	mov cx, 78
	call filld

	; Displays the Pascal string at qqqqw prefixed by qqqqbefore spaces.
	mov si, qqqqw
	lodsb				;Get length of Pascal string.
	mov cl, al
	mov ch, 0
	mov dx, cx
	mov bh, 0
	mov cx, qqqqbefore
	jcxz y5
	mov ax, 256*0Eh+' '
y2:     int 10h
	loop y2
y5:     mov cx, dx
	mov ah, 0Eh
y3:     lodsb
	int 10h
	loop y3
y8:     mov cx, 78
	sub cx, qqqqbefore
	sub cx, dx
	jcxz y7
	mov ax, 0Eh*256+' '
y4:     int 10h
	loop y4
y7:     mov ax, 0Eh*256+0b3h		;'│' The line ends by this, too.
	int 10h

	jmp lld				;Display next line of our quote.

;=======Prints colorful header or footer line (func_Header).
;	Input is Pascal string at SI.
header:
	mov bx, 16
	call fillc
	mov ax, 0Eh*256+0b2h		;'▓'.
	mov b [offset ploop2], 48h	;Set to `dec ax' (48h).
	call ploop
	lodsb
	mov ah, 0
	mov dx, ax
	shr ax, 1
	mov cx, 25
	sub cx, ax
	mov bx, cx
	mov ax, 0Eh*256+' '
	mov bh, 0
	jcxz y74
y75:    int 10h
	loop y75
y74:    mov cx, [ds:si-1]
	mov ch, 0
y76:    lodsb
	int 10h
	loop y76
	mov cx, 50
	sub cx, bx
	sub cx, dx
	mov al, ' '
	jcxz y78
y77:    int 10h
	loop y77
y78:    mov al, 0b0h			;'░'.
	mov b [offset ploop2], 40h	;Set to `inc ax' (40h).
	call ploop
	mov bx, 7
	;call fillc			;Optimized away.
	;ret				;Optimized away.
fillc:	mov cx, 80			;Print 80 spaces with attributes in BX.
filld:	mov ax, 920h			;Print CX spaces with attributes in BX.
	int 10h
	ret

;=======Prints a top or bottom border line (func_PrintLine).
;	Input: AL=left corner byte; BL=right corner byte; AH=0Eh; BH=0.
pline:	int 10h
	mov cx, 78
	mov al, 196			;'─'.
y70:    int 10h
	loop y70
	mov al, bl
	int 10h
	ret

ploop:	mov cx, 3
y72:    int 10h
	int 10h
	int 10h
	int 10h
	int 10h
ploop2:	dec ax				;Self-modifying code will modify this to `dec ax' or `inc ax'.
	loop y72
	ret

;=======Data with initial value (_data).
txtfn		db 'QUOTE.TXT',0
idxfn		db 'QUOTE.IDX',0
headermsg	db 34,'PotterSoftware Fortune Teller 2.6'  ; Size 34 should be 33.
footermsg	db 44,'Greetings to RP,TT,FZ/S,Blala,OGY,FC,VR,JCR.'
