; -*- coding: utf-8 -*-
;
; PotterSoftware Quote Displayer V2.62 (A86 3.22 .. 4.05 source code)
; (C) 22 September 1996 by EplPáj of PotterSoftware, Hungary
;
; Compile it with A86 3.22 .. 4.05 on DOS, generate quote6.com: a86 quote6.8
;
; !! TODO: 8086 support (quotex.nasm)
; !! TODO: report error if empty or more than 65535 quotes
; !! TODO: Linux i386 version with ANSI codes for linux and xterm terminals
;
;I read from QUOTE.TXT, and I read/write/keep QUOTE.IDX in the current dir.
;
;If you do not specify the command line parameter, first I check for .idx If
;I can't find it, I generate it. Then using up the .idx I display a random
;quote from .txt in the speed of light.
;
;If you give parameter "i", I'll create the .idx and quit immediately without
;echoing anything to the screen.
;
;You can either give the parameter "id" or "di". If you do this, I'll first
;(re)generate the .idx regardless it exists or not, then I display a quote.
;
;And last, specifying the parameter "slow", I display the quote without
;touching the .idx file. Of course it's *very* slow unless you've a .txt file
;smaller than 64K.
;
;I require an IBM compatible PC/AT computer, I can even work on a 286, but
;unfurtunately the XT is not supported. I need exactly 64K free conventional
;memory. No matter ANSI.SYS is loaded or not. I can only produce nice
;text-mode graphics in 80-column modes. I need DOS 2.0 or later; DOSBox and
;FreeDOS also work.
;
;My error codes are not documentated, however, I give back the same errorlevel
;for the same error. Now the errors may be file i/o and line-too-long.
;
; Limits:
;
; * minimum quote size: 5 bytes (1 byte of text + CRLF + CRLF)
; * maximum quote size: 4096 bytes including the trailing CRLF (longer than
;   a screen)
; * minimum number of quotes: 1  !! check at indexing time
; * maximum number of quotes: 65535  !! check at indexing time
; * minimum quote.txt file size: 5 bytes (1 quote)
; * maximum quote.txt file size: 55 MiB == 55 << 20 bytes
; * quote.idx file size = 2 + ceil(number_of_quotes / 1024.0) bytes
; * minimum quote.idx file size: 2 + 1 == 3 bytes
; * maximum quote.idx file size: 2 + (55 << 10) == 56322 bytes
;
; Memory layout:
;
; * 0...0x80: PSP (Program Segment Prefix), populated by DOS.
; * 0x80...0x100: String containing command-line arguments, populated by DOS.
;   It starts with the 8-bit variable named `param'.
; * 0xf0...0xf2 (2 bytes): Variable named qqqqw. Overlaps command-line
;   arguments.
; * 0xf2...0xf4 (2 bytes): Variable named qqqqbefore. Overlaps command-line
;   arguments.
; * 0x100... (at most 3840 bytes): .com file (code and data) loaded by DOS.
;   Entry point is at the beginning, has label _start for convenience.
; * 0x1000...0x1800 (2048 bytes): Variable named buffer, file preread buffer.
;   Continues and overlaps idxc and index.
; * 0x1800...0x1802 (2 bytes): Variable named idxc, contains total number of
;   quotes.
; * 0x1802...0xf402 (56320 bytes): Array variable named index, index entries:
;   each byte contains the total number of quotes whose first byte is in the
;   corresponding 1024-byte block of quote.txt.
; * 0xf402...0x10000 (3070 bytes): Stack, it grows from high to low offsets.
;   Before jumping to 0x100, DOS pushes the exit address 0 within the PSP
;   (containing an `int 20h' instruction), so that a simple `ret' will exit
;   the program.
;

;=======Konstansok
	buflen= 2048
	idxlen= 55*1024
	quote_max= 4096

;=======Kezdőérték nélküli adatok
	buffer= [1000h]w		;Fájl-előreolvasó buffer
	idxc=   [1000h+buflen]w		;IDXC és INDEX egymás után van!!!
	index=  [1000h+buflen+2]w	;Indextábla 1 az 1-ben
	qqqqw=  [0F0h]w
	param=  [080h]b
	qqqqbefore= [0F2h]w

;=======Kód
_start:
	xor bx, bx
	mov idxc, bx

	cmp param, 2
	je l18
	mov ax, 0E0Dh
	int 10h				;BH=0, Writeln
	mov al, 00Ah
	int 10h
	mov si, offset headermsg		;Fejléc kiírása
	call header

l18:	mov ax, 3D00h
	mov dx, offset txtfn
	int 21h				;Open quote.txt
	if c call error
	push ax				;Save file handle

	mov ax, 3D00h
	mov dx, offset idxfn
	int 21h
	mov dl, param
	adc dl, 0
	jnz gen
	
;=======Beolvassuk az indextáblát
	mov bx, ax
	mov ah, 3Fh
	mov cx, idxlen+2
	mov dx, offset idxc
	int 21h
	mov ah, 3Eh
	int 21h
	pop bx				;Restore .txt handle
	jmp l5

;=======Generáljuk az indexfájlt
gen:	pop bx				;Get handle of quote.txt
	mov si, offset buffer
	mov di, offset index
	mov bp, 0A0Dh
	mov [si], bp			;Az első 4 byte nem lehet 13,10,13,10
	mov [si+2], bp

l2:	mov ah, 3Fh
	mov cx, 1024
	mov dx, offset buffer+4
	int 21h
	mov cx, ax
	jcxz l1
	mov al, 0

l4:	cmp [si], bp
	jne l3
	cmp [si+2], bp
	jne l3
	cmp b[si+4], 13
	if e call error
	inc idxc			;Megszámolunk egy idézetet
	inc ax				;Az 1K-kon belül is
l3:	inc si
	loop l4

	stosb				;Az adat felvétele az indextáblába
	lodsw
	mov [offset buffer], ax
	lodsw
	mov [offset buffer+2], ax
	mov si, offset buffer
	cmp di, idxlen
	jne l2
	push di				;Push error code

error:  mov al, 7			;General error message
	int 29h				;Beep
	pop ax				;Get code address of error, and
	mov ah, 4Ch			;give it back as errorlevel.
	int 21h

l1:	cmp param, 5
	je l19
	push bx				;File handle elmentése
	mov ah, 3Ch
	xor cx, cx			;Attribútumot nem kap
	mov dx, offset idxfn
	int 21h				;Open
	if c call error
	mov bx, ax
	mov ah, 40h
	lea cx, [di-offset idxc]	;CX:=DI-ofs(index)=indextábla_hossza
	mov dx, offset idxc
	int 21h				;Write
	mov ah, 3Eh
	int 21h				;Close .idx
	pop bx				;Most: BX=handle of quote.txt
l19:	cmp param, 2
	if e ret			;Exit with int 20h.

;=======Generates 32-bit random number in DX:AX. Clobbers flags, BP, BX, CX.
l5:	mov ah, 0
	int 1Ah				;Get time-random seed in CX:DX
	push bx
	xor bp, bp
	mov ax, cs
	add ax, dx			;Modify seed
	mov bx, ax
	mov dx, 8405h
	mul dx
	shl bx, 3
	add ch, cl
	add dx, bx
	add dx, cx
	shl cx, 2
	add dx, cx
	add dh, bl
	shl cx, 5
	add ax, 1
	adc dx, bp			;(DX:AX) += (0, 1). BP is 0.
	; Now DX:AX is a 32-bit random number.

;=======Generates random DX:=random(idxc) from random DX:AX.
;       Assumes BP==0. Clobbers flags, AX, BX.
	mov bx, dx
	mul idxc
	mov ax, bx
	mov bx, dx
	mul idxc
	add ax, bx
	adc dx, bp			;DX:=random(idxc). BP is 0.

;=======Finds block index (as SI-offset index) of the quote with index DX.
	pop bx
	mov si, offset index
	mov ah, 0
l7:	lodsb
	cmp dx, ax
	js l6
	sub dx, ax
	jmp l7

;=======Seeks to the block of our quote with index DX.
l6:	sub si, offset index+2		;Most: SI=hányadik 1024 byte-os szelet
	push dx				;Most: AX=a szelet ?-ik idézete
	mov bp, 0A0Dh
	mov ax, 4200h
	jns l8
	xor dx, dx
	xor cx, cx
	int 21h
	mov dx, offset buffer+1024
	mov w buffer[1024-4], bp
	mov w buffer[1024-2], bp
	jmp l20
l8:	mov dx, si
	shl dx, 10
	mov cx, si
	shr cx, 6
	int 21h
	mov dx, offset buffer

;=======Reads the blocks containing our quote.
l20:	mov ah, 3Fh
	mov cx, quote_max		;Ennyi tuti, hogy elég lesz.
	mov buffer[quote_max], bp	;Biztos, ami biztos, idézet vége
	mov buffer[quote_max+2], bp	;jelet teszünk a buffer végére.
	int 21h				;Olvasás
	mov ah, 3Eh
	int 21h				;Close .txt

	pop ax
	mov di, offset buffer+1020-1
l21:	inc di
	cmp [di], bp
	jne l21
	cmp [di+2], bp
	jne l21
	dec ax
	jns l21
	add di, 4			;DI:=offset(idézet)

;=======Kiírjuk a kiválasztott idézetet
	mov ax, 00EDAh			;Felső keret
	mov bx, 0BFh
	call pline

lld:    mov cx, 79
	mov al, 13			;CR
	lea si, [di-1]
	repnz scasb			;Seek CR
	if nz call error		;Túl hosszú sor
	sub cx, 79
	inc cx				;NOT nem állítja a flageket!!!
	neg cx				;Most CX=sor hossza, CR nélkül
	jnz y91

lle:	mov ax, 00EC0h			;Üres sor=> Idézet vége, kilépés
	mov bx, 0D9h			;└┘
	call pline
	mov si, offset footermsg
	call header
	mov bx, 7
	call fillc
	ret				;Exit with int 20h.

y91:    inc di
	mov [si], cl			;Set length of Pascal string.

;=======Prints the Pascal string starting at SI with the correct color & alignment
;       according to the control codes found at [SI] and [SI+1]. Keeps DI intact.
	; Calculate the value of BEFORE first using up AnsiCh:
	; #0=Left '-'=Right '&'=Center alignment.
	mov qqqqw, si
	lodsb				;AL:=length(s), AL<>0.
	mov dl, 0			;AnsiCh=dl is 0 by default
	cmp byte ptr [si], '-'
	jne yc
	add qqqqw, 2			;Ha AnsiCh<>0 => s[1,2] kihagyása
	dec ax
	dec ax
	mov dx, ax
	xchg [si+1], dl			;length odébbmásolása, új AnsiCh
yc:     mov ah, 0
	mov bx, 78
	mov cx, 15
	cmp dl, 0
	jne ya
	mov al, 0
	xor bx, bx
	mov cx, 7
	jmp yb
ya:     cmp dl, '&'
	jne yb
	mov bx, 39
	shr ax, 1
	mov cx, 10
yb:     sub bx, ax
	mov qqqqbefore, bx
	mov ax, 0Eh*256+0b3h		;'│' Start the line
	mov bh, 0
	int 10h
	mov bx, cx
	mov cx, 78
	call filld
	; Display the Pascal string at qqqqw prefixed by qqqqbefore spaces.
	mov si, qqqqw
	lodsb				;Get length of Pascal string.
	mov cl, al
	mov ch, 0
	mov dx, cx
	mov bh, 0
	mov cx, qqqqbefore
	jcxz y5
	mov ax, 256*0Eh+' '
y2:     int 10h
	loop y2
y5:     mov cx, dx
	mov ah, 0Eh
y3:     lodsb
	int 10h
	loop y3
y8:     mov cx, 78
	sub cx, qqqqbefore
	sub cx, dx
	jcxz y7
	mov ax, 0Eh*256+' '
y4:     int 10h
	loop y4
y7:     mov ax, 0Eh*256+0b3h		;'│' The line ends by this, too.
	int 10h

	jmp lld				;Display next line of our quote.

;(3)
;Itt kerülnek leírásra a meghívott függvények.
;

header: 	                        ;Fejléc & Lábléc kiíró
					;Hívás: string absoulute DS:SI
y71:    mov bx, 16
	call fillc
	mov ax, 0Eh*256+0b2h		;'▓'
	mov b [offset ploop2], 48h	;DEC AX-re
	call ploop
	lodsb
	mov ah, 0
	mov dx, ax
	shr ax, 1
	mov cx, 25
	sub cx, ax
	mov bx, cx
	mov ax, 0Eh*256+' '
	mov bh, 0
	jcxz y74
y75:    int 10h
	loop y75
y74:    mov cx, [ds:si-1]
	mov ch, 0
y76:    lodsb
	int 10h
	loop y76
	mov cx, 50
	sub cx, bx
	sub cx, dx
	mov al, ' '
	jcxz y78
y77:    int 10h
	loop y77
y78:    mov al, 0b0h			;'░'
	mov b [offset ploop2], 40h	;INC AX
	call ploop
	mov bx, 7			;call fillc; ret Meg lett spórolva
fillc:	mov cx, 80
filld:	mov ax, 920h			;Fekete hátterű üres sort hagyunk.
	int 10h
	ret

pline:	int 10h				;Hívás: AH=0Eh, AL=1. ch, BX=2. ch
	mov cx, 78
	mov al, 196			;'─'
y70:    int 10h
	loop y70
	mov al, bl
	int 10h
	ret

ploop:	mov cx, 3
y72:    int 10h
	int 10h
	int 10h
	int 10h
	int 10h
ploop2:	dec ax
	loop y72
	ret

;=======Kezdőértékes adatok
txtfn	db 'QUOTE.TXT',0
idxfn	db 'QUOTE.IDX',0
headermsg	db 34,'PotterSoftware Fortune Teller 2.6'  ; Size 34 should be 33.
footermsg	db 44,'Greetings to RP,TT,FZ/S,Blala,OGY,FC,VR,JCR.'
