;
; PotterSoftware Quote Displayer V2.52 (A86, NASM, Yasm source code)
; (C) 1996 by EplPáj of PotterSoftware, Hungary
;
; Compile it with NASM 0.98.39 .. 2.13.02 ...:
;
;   nasm -O0 -f bin -o quote52n.com quote52.8
;
; Alternatively, compile it with Yasm 1.2.0 or 1.3.0:
;
;   yasm -O0 -f bin -o quote52n.com quote52.8
;
; Alternatively, compile it with A86 3.22 .. 4.05 on DOS, generate quote52.com:
;
;   a86 quote52.8
;
; The QUOTE.IDX index file format is identical in version 2.30 .. 2.5? and
; different from version 2.60.
;
; The most important update since V2.40 is that ANSI.SYS is no longer needed
; for color display. With ANSI.SYS, \x1B escapes were use when printing with
; with int 029h, now int 010h is used (color specified in bl, with AH=0Eh
; and AH=09h). The latter works in DOSBox as well.
;
; Command-line argument (first byte on the command-line):
;
; * ' '-> Display a quote using index table (default).
; * 'A'-> Display a quote using linear search.
; * 'B'-> Create index table & then display a quote using it.
; * 'C'-> Create index table.
;

; These magic lines below load the assembler compatibility library in file
; nasm.8, which makes the rest of the code work with the assemblers
; A86 >=3.22, NASM >=0.98.39, Yasm >=1.2.0. Please note that A86 3.22 doesn't
; support `include', so to make it work, replace these lines with the contents
; of the file nasm.8.
%define macro  ; NASM + Yasm code follows (no A86).
%macro include 1
%include %1
%endm
%define __EM__ #em  ; End of NASM + Yasm code.
include 'nasm.8'

org 100h
bits 16
cpu 286  ; Some instructions below (such as higher-than-1 bit shifts) need 286.

full equ 16384  ; Just a size (04000h).

_bss_data equ 018h  ; Overlaps the beginning of headermsg. Unfortunately it's not possible to precompute in A86 3.22.
;_bss_data equ headermsg  ; This forward-declaration doesn't work in A86.

; _bss variables.
qqq_a equ _bss_data-018h+018h  ; w
qqq_b equ _bss_data-018h+01Ah  ; w
qqq_w equ _bss_data-018h+01Ch  ; w
qqq_llw equ _bss_data-018h+01Eh  ; w
qqq_lhw equ _bss_data-018h+020h  ; w
qqq_maxlw equ _bss_data-018h+022h  ; w
qqq_maxhw equ _bss_data-018h+024h  ; w
qqq_oldllw equ _bss_data-018h+026h  ; w
qqq_oldlhw equ _bss_data-018h+028h  ; w
qqq_before equ _bss_data-018h+02Ah  ; w
qqq_xch equ _bss_data-018h+02Ch  ; b  ; Contains the command-line argument character: 0 for missing or space (' '), otherwise uppercased ('A' to 'C').
qqq_ansich equ _bss_data-018h+02Dh  ; b
qqq_han equ _bss_data-018h+02Eh  ; w  ; Filehandle.

_code:
_start:  ; begin { program entry point }
	; Increase DS and SS to accommodate for the total memory usage of 68 KiB (67
	; KiB for code and data + 1 KiB for stack).
	mov ah, 4Ah  ; https://stanislavs.org/helppc/int_21-4a.html
	mov bx, 1100h  ; Number of bytes needed == 1100h * 16, that's 68 KiB.
	int 21h
	jnc resize_ok
	jmp_near fatal_error
resize_ok:
	mov ax, ds  ; @0x100  8CD8
	add ax, word_arg(seg_delta)  ; @  055400
	mov ds, ax  ; @  8ED8
	mov es, ax  ; es will remain this way for the rest of the run.
	mov ax, ss  ; @  8CD0
	add ax, 0100h  ; @  050001  ; 1 KiB of stack at the end of the 68 KiB.
	mov ss, ax  ; @  8ED0

	mov bh, 00h  ; @  B700
	mov ax, 0E0Dh  ; @  B80D0E
	int 010h  ; @  CD10
	mov al, 0Ah  ; @  B00A
	int 010h  ; @  CD10
	push_byte headermsg  ; @0x0119  6A18
	call func_Header  ; @  E89003
	mov al, [cs:081h]  ; @  2EA08100
	cmp al, ' '  ; @  3C20
	jnz lx_12a  ; @  7504
	mov al, [cs:082h]  ; @  2EA08200
lx_12a:	cmp byte [cs:080h], 00h  ; @  2E803E800000
	jnz lx_137  ; @  7505
	mov byte [qqq_xch], ' '  ; @  C6062C0020
lx_137:	and al, 0DFh  ; @  24DF
	mov [qqq_xch], al  ; @  A22C00
	; XReset(IdxFn);
	mov ax, 03D00h  ; @  B8003D
	mov dx, idxfn  ; @  BA0C00
	int 021h  ; @  CD21
	mov [qqq_han], ax  ; @  A32E00
	sbb ax, ax  ; @  1BC0
	mov word [offset idx], 00h  ; @  C7066D400000  ; idx[0]:=0
	cmp ax, word_arg(0)  ; @  3D0000
	jnz lx_162  ; @  750A
	cmp byte [qqq_xch], 0Dh  ; @  803E2C000D
	jnz lx_162  ; @  7503
	jmp_near lls  ; @  E91101
lx_162:	; XReset(TXTFN);
	mov ax, 03D00h  ; @  B8003D
	mov dx, txtfn  ; @  BA0000
	int 021h  ; @  CD21
	mov [qqq_han], ax  ; @  A32E00
	jnc lx_172  ; @  7303
	jmp_near fatal_error  ; @  E9F002
lx_172:	mov ax, 04202h  ; @  B80242
	mov bx, [qqq_han]  ; @  8B1E2E00
	xor cx, cx  ; @  33C9
	xor dx, dx  ; @  33D2
	int 021h  ; @  CD21
	mov [qqq_maxlw], ax  ; @  A32200
	mov [qqq_maxhw], dx  ; @  89162400
	mov ax, 04200h  ; @  B80042
	mov bx, [qqq_han]  ; @  8B1E2E00
	xor cx, cx  ; @  33C9
	xor dx, dx  ; @  33D2
	int 021h  ; @  CD21
	mov word [qqq_b], full+4  ; @  C7061A000440
	xor ax, ax  ; @  33C0
	mov [qqq_llw], ax  ; @  A31E00
	mov [qqq_lhw], ax  ; @  A32000
	mov [qqq_oldllw], ax  ; @  A32600
	mov [qqq_oldlhw], ax  ; @  A32800
	mov word [qqq_a], 01h  ; @  C70618000100
	mov [offset buf+full], ax  ; Make sure we don't detect CRLF+CRLF at the beginning.

lx_1ad:	call func_GetNext  ; @  E8B602
	mov si, offset buf-4  ; @  BE6400
	add si, [qqq_b]  ; @  03361A00
	cmp word [si], 0A0Dh  ; @  813C0D0A
	jnz lx_1f3  ; @  7536
	cmp word [si+02h], 0A0Dh  ; @  817C020D0A
	jnz lx_1f3  ; @  752F
	mov ax, [qqq_llw]  ; @  A11E00
	mov dx, [qqq_lhw]  ; @  8B162000
	sub ax, [qqq_oldllw]  ; @  2B062600
	sbb dx, [qqq_oldlhw]  ; @  1B162800
	mov di, offset idx  ; @  BF6D40
	add di, [qqq_a]  ; @  033E1800
	add di, [qqq_a]  ; @  033E1800
	mov [di], ax  ; @  8905
	mov [di+02h], dx  ; @  895502
	inc word [qqq_a]  ; @  FF061800
	mov ax, [qqq_llw]  ; @  A11E00
	mov [qqq_oldllw], ax  ; @  A32600
	mov ax, [qqq_lhw]  ; @  A12000
	mov [qqq_oldlhw], ax  ; @  A32800
lx_1f3:	mov ax, [qqq_maxlw]  ; @  A12200
	mov dx, [qqq_maxhw]  ; @  8B162400
	cmp [qqq_llw], ax  ; @  39061E00
	jnz lx_1ad  ; @  75AD
	cmp [qqq_lhw], dx  ; @  39162000
	jnz lx_1ad  ; @  75A7

	; Now qqq.a == (number of quotes) + 1.
	; close(f).
	mov ah, 03Eh  ; @  B43E
	mov bx, [qqq_han]  ; @  8B1E2E00
	int 021h  ; @  CD21
	cmp byte [qqq_xch], 'A'  ; @  803E2C0041
	jnz compress_index  ; @  7503
	jmp_near llc  ; @  E9AD00

compress_index:  ; Compresses the index from offset idx+2 to offset buf.
	; qqq_a is still the number of quotes.
	mov cx, [qqq_a]  ; @  8B0E1800
	dec cx  ; @  49
	mov si, offset idx+2  ; @  BE6F40
	mov di, offset buf  ; @  BF6800
	xor dx, dx  ; @  33D2
lx_229:	lodsw  ; @  AD
	stosb  ; @  AA
	cmp ax, 0F0h  ; @  3DF000
	jc lx_238  ; @  7208
	dec di  ; @  4F
	rol ax, 8  ; @  C1C008
	or ax, 0F0h  ; @  0DF000
	stosw  ; @  AB
lx_238:	loop lx_229  ; @  E2EF

	sub_di_byte offset buf  ; DI := number of compressed bytes to write.
	mov ah, 03Ch  ; @  B43C
	mov cx, 00h  ; @  B90000
	mov dx, idxfn  ; @  BA0C00
	int 021h  ; @  CD21
	jnc lx_252  ; @  7303
	jmp_near fatal_error  ; @  E91002
lx_252:	jnc lx_259  ; @  7305
fatal_error:
	mov ax, 04CF0h  ; @  B8F04C
	int 021h  ; @  CD21
lx_259:	; blockwrite(f, buf, compressed_size);
	mov ah, 040h  ; @  B440
	mov bx, [qqq_han]  ; @  8B1E2E00
	mov cx, di  ; @  8B0E1800
	mov dx, offset buf  ; @  BA6800
	int 021h  ; @  CD21
	mov ah, 03Eh  ; @  B43E
	mov bx, [qqq_han]  ; @  8B1E2E00
	int 021h  ; @  CD21
	jmp_near llc  ; @  E95200

lls:	; XReset(IDXFN);
	mov ax, 03D00h  ; @  B8003D
	mov dx, idxfn  ; @  BA0C00
	int 021h  ; @  CD21
	mov [qqq_han], ax  ; @  A32E00
	jnc lx_283  ; @  7303
	jmp_near fatal_error  ; @  E9DF01
lx_283:	; blockread(f, buf, full+4, reg_cx);
	mov ah, 03Fh  ; @  B43F
	mov bx, [qqq_han]  ; @  8B1E2E00
	mov cx, full+4  ; @  B9FFFF
	mov dx, offset buf  ; @  BA6800
	int 021h  ; @  CD21
	mov cx, ax  ; @  A31800  ; Save number of (compressed) bytes read to cx, for below.
	mov ah, 03Eh  ; @  B43E
	mov bx, [qqq_han]  ; @  8B1E2E00
	int 021h  ; @  CD21

	; Decompresses the index from buf to idx+2.
	mov dx, 01h  ; @  BA0100
	mov si, offset buf  ; @  BE6800
	mov di, offset idx+2  ; @  BF6F40
lx_2ad:	lodsb  ; @  AC
	mov ah, 00h  ; @  B400
	stosw  ; @  AB
	cmp al, 0F0h  ; @  3CF0
	jc lx_2be  ; @  7209
	dec di  ; @  4F
	dec di  ; @  4F
	and al, 0Fh  ; @  240F
	mov ah, al  ; @  88C4
	lodsb  ; @  AC
	stosw  ; @  AB
	dec cx  ; @  49
lx_2be:	inc dx  ; @  42
	loop lx_2ad  ; @  E2EC
	mov [qqq_a], dx  ; @  89161800  ; qqq.a := (number of quotes) + 1.

llc:	cmp byte [qqq_xch], 'C'  ; @  803E2C0043
	jnz lx_2cf  ; @  7503
	jmp_near exit  ; @  E99301
lx_2cf:	mov ax, 03D00h  ; @  B8003D
	mov dx, txtfn  ; @  BA0000
	int 021h  ; @  CD21
	mov [qqq_han], ax  ; @  A32E00
	jnc lx_2df  ; @  7303
	jmp_near fatal_error  ; @  E98301
lx_2df:	; Now qqq_a-1 is the number of quotes in txtfn, provided that txtfn ends with CRLF + CRLF.
	xor ax, ax
	mov [qqq_llw], ax  ; L kezdőoffszet kiszámolása
	mov [qqq_lhw], ax
	mov si, [qqq_a]
	test si, si
	jz after_random  ; If there are 0 quotes, print from the beginning of txtfn.
	dec si  ; SI := Number of quotes.

	; DX:=random(SI);  Then 0 <= SI < DX.
	; This code may ruin AX, BX, CX, SI, DI, BP and FLAGS.
	;
	; This code generates a 32-bit random number n in a register pair, then computes
	; qqq_w := (n * (qqq_a + 1)) >> 32 as the random value.
	;mov ah, 0  ; Not needed, AX=0 above.
	int 01Ah  ; Get time-random seed in CX:DX.
	xor bp, bp
	mov ax, cs
	add ax, dx  ; Modify seed.
	mov bx, ax
	mov dx, 08405h
	mul dx
	shl bx, 3
	add ch, cl
	add dx, bx
	add dx, cx
	shl cx, 2
	add dx, cx
	add dh, bl
	shl cx, 5
	add ax, 1  ; Modifies CF (inc ax doesn't)..
	adc dx, bp
	mov bx, dx
	mul si
	mov ax, bx
	mov bx, dx
	mul si
	add ax, bx
	adc dx, bp  ; DX:=random(SI)
	jz after_random  ; If the chosen random number is 0, print from the beginning of txtfn.

	mov si, offset idx  ; @  BE6D40
	add si, dx  ; @  03361C00
	add si, dx  ; @  03361C00
	std  ; @  FD
lx_322:	lodsw  ; @  AD
	add [qqq_llw], ax  ; @  01061E00
	adc word [qqq_lhw], byte_arg(0)  ; db 083h, 016h, qqq_lhw, 0, 0  ; @  8316200000
	cmp si, offset idx  ; @  81FE6D40
	jnz lx_322  ; @  75F0
	cld  ; @  FC

after_random:
	mov dx, 0BFDAh  ; @  BADABF  ; '┌┐'  ; Keret ki
	call func_PrintLine  ; @  E8D401
lx_339:	mov ax, 04200h  ; @  B80042
	mov bx, [qqq_han]  ; @  8B1E2E00
	mov dx, [qqq_llw]  ; @  8B161E00
	mov cx, [qqq_lhw]  ; @  8B0E2000
	int 021h  ; @  CD21
	mov ah, 03Fh  ; @  B43F
	mov bx, [qqq_han]  ; @  8B1E2E00
	mov cx, 0FFh  ; @  B9FF00
	mov dx, offset var_s+1  ; @  BA6900
	int 021h  ; @  CD21
	mov [qqq_w], ax  ; @  A31C00
	cmp ax, word_arg(0)  ; @  3D0000
	jnz lx_363  ; @  7503
	jmp_near lx_448  ; @  E9E500
lx_363:	mov bx, 00h  ; @  BB0000
	mov si, offset var_s+1  ; @  BE6900
lx_369:	or bh, bh  ; @  0AFF
	jnz lx_375  ; @  7508
	cmp byte [bx+si], 0Dh  ; @  80380D
	jz lx_378  ; @  7406
	inc bx  ; @  43
	jmp short lx_369  ; @  EBF4
lx_375:	jmp_near fatal_error  ; Error: Line longer than 255 bytes.
lx_378:	mov [offset var_s], bl  ; @  881E6800
	inc bx  ; @  43
	inc bx  ; @  43
	add [qqq_llw], bx  ; @  011E1E00
	adc word [qqq_lhw], byte_arg(0)  ; db 083h, 016h, qqq_lhw, 0, 0  ; @  8316200000
	mov cx, ds  ; @  8CD9
	mov si, offset var_s  ; @  BE6800
	mov [qqq_w], si  ; @  89361C00
	lodsb  ; @  AC
	cmp al, 00h  ; @  3C00
	jnz lx_39c  ; @  7507
	mov al, 01h  ; @  B001
	mov ds, cx  ; @  8ED9
	jmp_near lx_441  ; @  E9A500
lx_39c:	mov byte [qqq_ansich], 00h  ; @  C6062D0000
	cmp byte [si], '-'  ; @  803C2D
	jnz lx_3b9  ; @  7513
	mov al, [si+01h]  ; @  8A4401
	mov [qqq_ansich], al  ; @  A22D00
	add word [qqq_w], byte_arg(2)  ; db 083h, 006h, qqq_w, 0, 2  ; @  83061C0002
	mov al, [si-01h]  ; @  8A44FF
	dec ax  ; @  48
	dec ax  ; @  48
	mov [si+01h], al  ; @  884401
lx_3b9:	mov ah, 00h  ; @  B400
	mov ds, cx  ; @  8ED9
	mov bx, 04Eh  ; @  BB4E00
	mov cx, 0Fh  ; @  B90F00
	cmp byte [qqq_ansich], 00h  ; @  803E2D0000
	jnz lx_3d5  ; @  750B
	mov al, 00h  ; @  B000
	mov bx, 00h  ; @  BB0000
	mov cx, 07h  ; @  B90700
	jmp_near lx_3e4  ; @  E90F00
lx_3d5:	cmp byte [qqq_ansich], '&'  ; @  803E2D0026
	jnz lx_3e4  ; @  7508
	mov bx, 027h  ; @  BB2700
	shr ax, 1  ; @  D1E8
	mov cx, 0Ah  ; @  B90A00
lx_3e4:	sub bx, ax  ; @  29C3
	mov [qqq_before], bx  ; @  891E2A00
	mov ax, 0EB3h  ; @  B8B30E
	mov bh, 00h  ; @  B700
	int 010h  ; @  CD10
	mov bx, cx  ; @  8BD9
	mov cx, 04Eh  ; @  B94E00
	call func_Print_spaces  ; @  E82D01

	; Display the string "s" with "before" spaces in front of it.
	mov si, [qqq_w]  ; @  8B361C00
	lodsb  ; @  AC
	mov cl, al  ; @  88C1
	mov ch, 00h  ; @  B500
	mov dx, cx  ; @  8BD1
	jcxz lx_437  ; @  E330
	mov cx, [qqq_before]  ; @  8B0E2A00
	jcxz lx_416  ; @  E309
	mov ax, 0E20h  ; @  B8200E
	mov bh, 00h  ; @  B700
lx_412:	int 010h  ; @  CD10
	loop lx_412  ; @  E2FC
lx_416:	mov cx, dx  ; @  8BCA
	jcxz lx_423  ; @  E309
	mov ah, 0Eh  ; @  B40E
	mov bh, 00h  ; @  B700
lx_41e:	lodsb  ; @  AC
	int 010h  ; @  CD10
	loop lx_41e  ; @  E2FB
lx_423:	mov cx, 04Eh  ; @  B94E00
	sub cx, [qqq_before]  ; @  2B0E2A00
	sub cx, dx  ; @  29D1
	jcxz lx_437  ; @  E309
	mov ax, 0E20h  ; @  B8200E
	mov bh, 00h  ; @  B700
lx_433:	int 010h  ; @  CD10
	loop lx_433  ; @  E2FC
lx_437:

	mov ax, 0EB3h  ; @  B8B30E
	mov bh, 00h  ; @  B700
	int 010h  ; @  CD10
	mov al, 00h  ; @  B000
lx_441:	or al, al  ; @  0AC0
	jnz lx_448  ; @  7503
	jmp_near lx_339  ; @  E9F1FE
lx_448:	mov dx, 0D9C0h  ; @  BAC0D9
	call func_PrintLine  ; @  E8BF00
	push_byte footermsg  ; @0x044F  6A3B
	call func_Header  ; @  E85A00
	mov ah, 03Eh  ; @  B43E
	mov bx, [qqq_han]  ; @  8B1E2E00
	int 021h  ; @  CD21
	mov bx, 07h  ; @  BB0700
	call func_Print_80_spaces  ; @  E8C100
exit:	mov ax, 04C00h
	int 021h  ; @0x0464  CD21  ; Exit to DOS, with EXIT_SUCCESS (0).

	; May ruin SI and possibly other registers.
func_GetNext:
	cmp word [qqq_b], full+4  ; @  813E1A000440
	jnz lx_498  ; @  752A
	; move(src:=buf[full], dst:=buf[0], 4);
	  mov si, offset buf + full
	  mov di, offset buf
	  movsw
	  movsw
	mov ah, 03Fh  ; @  B43F
	mov bx, [qqq_han]  ; @  8B1E2E00
	mov cx, full  ; @  B90040
	mov dx, offset buf+4  ; @  BA6C00
	int 021h  ; @  CD21
	jnc lx_492  ; @  7505
	mov ax, 04CF1h  ; @  B8F14C  ; Abort on read error.
	int 021h  ; @  CD21
lx_492:	mov word [qqq_b], 04h  ; @  C7061A000400
lx_498:	mov bx, [qqq_b]  ; @  8B1E1A00
	mov_al_bx_byte offset buf  ; @  8A4768
	inc word [qqq_b]  ; @  FF061A00
	add word [qqq_llw], byte_arg(1)  ; db 083h, 006h, qqq_llw, 0, 1  ; @  83061E0001
	adc word [qqq_lhw], byte_arg(0)  ; db 083h, 016h, qqq_lhw, 0, 0  ; @  8316200000
	ret  ; @  C3

func_Header:
	push bp  ; @  55
	mov bp, sp  ; @  89E5
	mov bx, 010h  ; @  BB1000
	call func_Print_80_spaces  ; @  E86C00
	mov ax, 0EB2h  ; @  B8B20E
	mov byte [cs:ploop2], 048h  ; @  2EC606390548  ; 48h: DEC AX
	call func_Print_header_side  ; @  E86900
	mov si, [bp+04h]  ; @  8B7604
	lodsb  ; @  AC
	mov ah, 00h  ; @  B400
	mov dx, ax  ; @  8BD0
	shr ax, 1  ; @  D1E8
	mov cx, 019h  ; @  B91900
	sub cx, ax  ; @  2BC8
	mov bp, cx  ; @  89CD
	mov ax, 0E20h  ; @  B8200E
	mov bh, 00h  ; @  B700
	jcxz lx_4df  ; @  E304
lx_4db:	int 010h  ; @  CD10
	loop lx_4db  ; @  E2FC
lx_4df:	mov cx, [si-01h]  ; @  8B4CFF
	mov ch, 00h  ; @  B500
lx_4e4:	lodsb  ; @  AC
	int 010h  ; @  CD10
	loop lx_4e4  ; @  E2FB
	mov cx, 032h  ; @  B93200
	sub cx, bp  ; @  2BCD
	sub cx, dx  ; @  29D1
	mov al, 020h  ; @  B020
	jcxz lx_4f8  ; @  E304
lx_4f4:	int 010h  ; @  CD10
	loop lx_4f4  ; @  E2FC
lx_4f8:	mov al, 0B0h  ; @  B0B0
	mov byte [cs:ploop2], 040h  ; @  2EC606390540  ; 40h: INC AX
	call func_Print_header_side  ; @  E82900
	mov bx, 07h  ; @  BB0700
	call func_Print_80_spaces  ; @  E81A00
	pop bp  ; @  5D
	ret 02h  ; @  C20200

func_PrintLine:
	mov ah, 0Eh  ; @  B40E
	mov bh, 00h  ; @  B700
	mov al, dl  ; @  8AC2
	int 010h  ; @  CD10
	mov cx, 04Eh  ; @  B94E00
	mov al, 0C4h  ; @  B0C4
lx_51a:	int 010h  ; @  CD10
	loop lx_51a  ; @  E2FC
	mov al, dh  ; @  8AC6
	int 010h  ; @  CD10
	ret  ; @  C3

func_Print_80_spaces:  ; Print 80 spaces with attributes in BX.
	mov cx, 050h  ; @  B95000
func_Print_spaces:  ; Print CX spaces with attributes in BX.
	mov ax, 0920h  ; @  B82009
	int 010h  ; @  CD10
	ret  ; @  C3

func_Print_header_side:  ; Prints the left or right side of the header.
	mov cx, 03h  ; @  B90300
lx_52f:	int 010h  ; @  CD10
	int 010h  ; @  CD10
	int 010h  ; @  CD10
	int 010h  ; @  CD10
	int 010h  ; @  CD10
ploop2:	dec ax  ; @  48  ; Self-modifying code will modify this to `dec ax' or `inc ax'.
	loop lx_52f  ; @  E2F3
	ret  ; @  C3

_code_padding:
	times_db ((_code - $) AND 15), 090h  ; Align to paragraph (16) boundary with nop.
seg_delta equ (($-_code) SHR 4) + 10h

; Data with initial value (_data).
_data:
txtfn_in_data: db 'QUOTE.TXT', 0, 0, 0  ; Extra 0s because of _bss overlap with headermsg.
txtfn equ txtfn_in_data-_data  ; Because of seg_delta.
idxfn_in_data: db 'QUOTE.IDX', 0, 0, 0  ; Extra 0s because of _bss overlap with headermsg.
idxfn equ idxfn_in_data-_data  ; Because of seg_delta.
;_bss_data equ $-_data  ; It's too late to define a forward reference like this in A86 3.22.
; Must be long enough (23 bytes) for overlap with qqq_... .
headermsg_in_data: db 34, 'PotterSoftware Quote Displayer 2.5'  ; !!
headermsg equ headermsg_in_data-_data  ; Because of seg_delta.
footermsg_in_data: db 44, 'Greetings to RP,TT,FZ/S,Blala,OGY,FC,VR,JCR.'
footermsg equ footermsg_in_data-_data  ; Because of seg_delta.
_data_end:

; More _bss: (Uninitialized data.)
buf equ _data_end-_data+((_data_end-_data) AND 1)  ; array[0..full+4-1] of char;  ; full+1+4 bytes used for multiple purposes.  ; Aligned.
var_s equ buf  ; string; overlaps buf
idx equ buf+full+1+4  ; !! -+1 array[0..24160] of word;  ; Unaligned. idx[0] is unused.

assert0 _bss_data-headermsg  ; Make sure `_bss_data equ' above is correct.
