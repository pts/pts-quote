; -*- coding: utf-8 -*-
;
; quote4.nasm: PotterSoftware Quote Displayer V2.41 (NASM source code)
; (C) 1996--2022-03-27 by EplPáj of PotterSoftware, Hungary
; translation to NASM on 2022-03-27
;
; Compile it with NASM 0.98.39 .. 2.13.02 ...:
;
;   $ nasm -O0 -f bin -o quote4n.exe quote4.nasm
;
; Alternatively, compile it with Yasm 1.2.0 or 1.3.0:
;
;   $ yasm -O0 -f bin -o quote4n.exe quote4.nasm
;
; This source file is for archival purposes only.
; Bugfixes and features shouldn't be added to this file, but to quote42.nasm.
;
; This program works as a DOS .exe file. It's a byte-by-byte reproduction of
; quote3.exe (2848 bytes) for archival. It also contains some magic numbers
; (especially in exe_header and stdlib_tpc), search for the word magic.
;
; This program (quote4n.exe) is buggy (just like quote3.exe) in both DOSBox
; and QEMU, it usually hangs after printing the header correctly.
; It is because of the slow random number generator. It also has some other
; serious bugs, see BUG in the source code.
;
; This is version 2.41. It is functionally equivalent to version 2.33, but
; it's implemented in NASM (rather than Turbo Pascal 7.0 inline assembly).
; The original source code for version 2.40 was implemented in A86, but that
; has been lost.
;
; The QUOTE.IDX index file format is identical in version 2.30 .. 2.5? and
; different from version 2.60.
;
; This source code is based on the disassembly of quote3.exe generated by
; the Turbo Pascal compiler (tp70), but it has been changed since then to
; make it work as a DOS .com program, and it is also based on the source
; code quote3.pas (mostly for comments).
;
; It uses ANSI.SYS for color output, and it detects the lack of ANSI.SYS
; (such as in DOSBox), and then it prints colorless output.
;
; Command-line argument (first byte on the command-line):
;
; * ' '-> Display a quote using index table (default).
; * 'A'-> Display a quote using linear search.
; * 'B'-> Create index table & then display a quote using it.
; * 'C'-> Create index table.
;

bits 16
cpu 286
org 0x100

exe_header:  ; Contains magic numbers.
db 'MZ'  ;  ; @0x0100
db 0x20, 0x01  ;  ; @0x0102
db 0x06  ;  ; @0x0104
db 0x00, 0x09  ;  ; @0x0105
db 0x00, 0x04  ;  ; @0x0107
db 0x00, 0xF1  ;  ; @0x0109
db 0x13, 0xF1  ;  ; @0x010B
db 0xB3, 0x9F  ;  ; @0x010D
db 0x10, 0x00  ;  ; @0x010F
db 0x40  ;  ; @0x0111
db 0x00, 0x00  ;  ; @0x0112
db 0xE8, 0x00, 0x00  ;  ; @0x0114
db 0x00, 0x1C  ;  ; @0x0117
db 0x00, 0x00  ;  ; @0x0119
db 0x00, 0xEB  ;  ; @0x011B
db 0x00, 0x00  ;  ; @0x011D
db 0x00, 0x54, 0x04  ;  ; @0x011F
db 0x00, 0x00  ;  ; @0x0122
db 0x26, 0x00, 0x46, 0x00  ;  ; @0x0124
db 0x52  ;  ; @0x0128
db 0x01, 0x46, 0x00  ;  ; @0x0129
db 0x09, 0x03  ;  ; @0x012C
db 0x46  ;  ; @0x012E
db 0x00, 0x24  ;  ; @0x012F
db 0x03, 0x46, 0x00  ;  ; @0x0131
db 0x3A, 0x03  ;  ; @0x0134
db 0x46  ;  ; @0x0136
db 0x00, 0x59, 0x03  ;  ; @0x0137
db 0x46  ;  ; @0x013A
db 0x00, 0xEB  ;  ; @0x013B
db 0x03, 0x46, 0x00  ;  ; @0x013D

_code:

; function GetNext: char; assembler;
func_GetNext:
cmp word [qqq_b], full+4  ; if qqq_b=full+4 then begin
jne strict short lx_33

; move(src:=buf[full], dst:=buf[0], 4);
  ; BUG: This code is completely buggy. It should be:
  ; mov si, buf + full
  ; mov di, buf
  ; movsw
  ; movsw
  xor di, buf
  add di, full
  mov ax, [buf]
  stosw
  mov ax, [buf+2]
  stosw
; blockread(f, buf[4], full, qqq_w);
mov ah, 0x3f
mov bx, [qqq_han]
mov cx, full
mov dx, buf+4
int 0x21
jnz strict short lx_2d  ; BUG: should be jnc.
mov ax, 0x4cf1  ; Abort on read error.
int 0x21
lx_2d:
mov word [qqq_b], 0x4  ; endif
lx_33:
mov bx, [qqq_b]  ; GetNext:=Buf[qqq_B];
mov al, [bx+buf]
inc word [qqq_b]
add word [qqq_l], byte +0x1  ; inc(qqq_l);
adc word [qqq_l+2], byte +0x0
ret

; procedure Header(const s: OpenString); assembler;
%define Header_arg_s (bp+4)
func_Header:
push bp
mov bp, sp
cmp byte [ttt], '*'
je strict short lx_69
mov dx, ttt+25
mov ah, 0x9
int 0x21
mov dx, ttt
mov ah, 0x9
int 0x21
lx_69:
mov al, 0xb2  ; '▓'
mov cx, 0x3
lx_6e:
int 0x29
int 0x29
int 0x29
int 0x29
int 0x29
dec al
loop lx_6e
push ds
lds si, [Header_arg_s]
lodsb
mov ah, 0x0
mov dx, ax
shr ax, 1
mov cx, 0x19
sub cx, ax
mov bx, cx
mov al, ' '
jcxz lx_96
lx_92:
int 0x29
loop lx_92
lx_96:
mov cx, [si-0x1]
mov ch, 0x0
lx_9b:
lodsb
int 0x29
loop lx_9b
pop ds
mov cx, 0x32
sub cx, bx
sub cx, dx
mov al, ' '
jcxz lx_b0
lx_ac:
int 0x29
loop lx_ac
lx_b0:
mov al, 0xb0  ; '░'
mov cx, 0x3
lx_b5:
int 0x29
int 0x29
int 0x29
int 0x29
int 0x29
inc al
loop lx_b5
cmp byte [ttt], '*'
je strict short lx_d1
mov dx, ttt+9
mov ah, 0x9
int 0x21
lx_d1:
leave
ret 0x4

; procedure PrintLine(w: word); assembler;
%define PrintLine_arg_w (bp+4)
func_PrintLine:
push bp
mov bp, sp
mov al, [PrintLine_arg_w]
int 0x29
mov cx, 0x4e
mov al, 0xc4  ; '─'
lx_e9:
int 0x29
loop lx_e9
mov al, [PrintLine_arg_w+1]
int 0x29
leave
ret 0x2

main_start_tpc:  ; Contains magic numbers.
call 0x46:0  ;  ; @0x0228
push bp  ;  ; @0x022D
mov bp, sp  ;  ; @0x022E

main:  ; begin { Főprogram }
mov al, 0xd  ; Writeln
int 0x29
mov al, 0xa
int 0x29

push ds  ; Header ki
push strict word headermsg
call func_Header

; Detect ANSI.SYS.
;
; From http://www.osfree.org/doku/en:docs:dos:api:int29 :
; COMMAND.COM v3.2 and v3.3 compare the INT 29 vector against the INT 20
; vector and assume that ANSI.SYS is installed if the segment is larger.
xor ax, ax
mov es, ax
mov bx, [es:0x29*4+2]  ; ansi:=memw[0:$29*4+2]>memw[0:$20*4+2];
cmp bx, [es:0x20*4+2]
jnc strict short lx_12b
mov byte [ttt], '*'  ; This means there's no ANSI.SYS
lx_12b:

mov ax, [PrefixSeg]
mov es, ax
mov al, [es:0x81]  ; First character of command-line arguments in PSP.  ; xch:=char(mem[PrefixSeg:$81]);
cmp al, ' '
jne strict short lx_13c  ; if xch=' ' then xch:=char(mem[PrefixSeg:$82]);
mov al, [es:0x82]
lx_13c:
cmp byte [es:0x80], 0x0  ; if mem[PrefixSeg:$80]=0 then xch:=' ';
jne strict short lx_146
mov al, ' '
lx_146:
and al, 255-32
mov [qqq_xch], al
; qqq_w:=XReset(IdxFn);
mov ax, 0x3d00  ; Open for Read Only, C-Mode
mov dx, idxfn
int 0x21
mov [qqq_han], ax
sbb ax, ax  ; AX:=0, ha OK ; AX:=$FFFF, ha hiba
mov word [idx], 0x0  ; idx[0]:=0
cmp ax, strict word 0x0  ; if (IOResult<>0) or (xch<>#0) then
jne strict short lx_16d
cmp byte [qqq_xch], 0x0
jne strict short lx_16d
jmp strict near lls
lx_16d:
; XReset(TXTFN);
mov ax, 0x3d00  ; Open for Read Only, C-Mode
mov dx, txtfn
int 0x21
;jc strict near fatal_error  ; BUG: Fail.
mov [qqq_han], ax
sbb ax, ax
; qqq_max:=filesize(f);
mov ax, 0x4202
mov bx, [qqq_han]
xor cx, cx
xor dx, dx
int 0x21
mov [qqq_max], ax
mov [qqq_max+2], dx
mov ax, 0x4200
mov bx, [qqq_han]
xor cx, cx
xor dx, dx
int 0x21
mov word [qqq_b], full+4  ; b:=full+4
xor ax, ax
mov [qqq_l], ax  ; l:=0
mov [qqq_l+2], ax
mov [qqq_oldl], ax  ; oldl:=0
mov [qqq_oldl+2], ax
mov word [qqq_a], 0x1
lx_1b5:
; repeat
call func_GetNext
mov si, buf-4
add si, [qqq_b]
cmp word [si], 0x0a0d  ; CRLF
jne strict short lx_1fd
cmp word [si+0x2], 0x0a0d  ; CRLF
jne strict short lx_1fd  ;  if buf[b-4]=newline then begin
mov ax, [qqq_l]  ;    idx[a]:=l-oldl
mov dx, [qqq_l+2]
sub ax, [qqq_oldl]
sbb dx, [qqq_oldl+2]
mov di, idx
add di, [qqq_a]
add di, [qqq_a]
mov [di], ax
mov [di+0x2], dx
inc word [qqq_a]
mov ax, [qqq_l]  ;    oldl:=l
mov [qqq_oldl], ax
mov ax, [qqq_l+2]
mov [qqq_oldl+2], ax  ;  end;
lx_1fd:
mov ax, [qqq_max]  ; until l=max
mov dx, [qqq_max+2]
cmp [qqq_l], ax
jne strict short lx_1b5
cmp [qqq_l+2], dx
jne strict short lx_1b5

; Close(f);
mov ah, 0x3e
mov bx, [qqq_han]
int 0x21
cmp byte [qqq_xch], 'A'  ; Nem írjuk ki az IT-t, ha az A par. van
jne strict short lx_222
jmp strict near llc
lx_222:
mov cx, [qqq_a]
dec cx
mov si, idx+2
mov ax, ds
mov es, ax
mov di, buf
xor dx, dx
lx_233:
lodsw
stosb
cmp ax, 0xf0
jc strict short lx_242
dec di
rol ax, byte 0x8
or ax, 0xf0
stosw
lx_242:
loop lx_233
mov [qqq_a], di
sub word [qqq_a], buf

; XRewrite(IDXFN);
mov ah, 0x3c  ; Create file
mov cx, 0x0
mov dx, idxfn
int 0x21
jnc strict short lx_25f
fatal_error:
mov ax, 0x4cf0  ; Fatal error
int 0x21
lx_25f:
; blockwrite(f, buf, qqq_a);
mov ah, 0x40
mov bx, [qqq_han]
mov cx, [qqq_a]
mov dx, buf
int 0x21
; close(f);
mov ah, 0x3e
mov bx, [qqq_han]
int 0x21
; goto c;
jmp strict short llc

lls:  ; end else begin
; XReset(IDXFN);
mov ax, 0x3d00  ; Open for Read Only, C-Mode
mov dx, idxfn
int 0x21
;jc strict near fatal_error  ; BUG: Fail.
mov [qqq_han], ax
sbb ax, ax
; blockread(f, buf, $FFFF, qqq_a);
mov ah, 0x3f
mov bx, [qqq_han]
mov cx, 0xffff  ; BUG: To avoid buffer overflow, read just full+4 instead of $FFFF.
mov dx, buf
int 0x21
mov [qqq_a], ax  ; Save number of (compressed) bytes read to qqq_a.
; close(f);
mov ah, 0x3e
mov bx, [qqq_han]
int 0x21

mov cx, [qqq_a]
mov dx, 0x1
mov si, buf
mov di, idx+2
mov ax, ds
mov es, ax
lx_2af:
lodsb
mov ah, 0x0
stosw
cmp al, 0xf0
jc strict short lx_2c0
dec di
dec di
and al, 0xf
mov ah, al
lodsb
stosw
dec cx
lx_2c0:
inc dx
loop lx_2af
mov [qqq_a], dx

llc:
cmp byte [qqq_xch], 'C'
jne strict short lx_2d1
jmp strict near exit
lx_2d1:
; XReset(TXTFN);
mov ax, 0x3d00  ; Open for Read Only, C-Mode
mov dx, txtfn
int 0x21
;jc strict near fatal_error  ; BUG: Fail.
mov [qqq_han], ax
sbb ax, ax

; qqq_w:=random(qqq_a+1);  Then 0 <= qqq_w < qqq_a + 1.
;
; According to https://stanislavs.org/helppc/bios_data_area.html , dword [0x40:0x6c]
; is the daily timer counter: equal to zero at midnight; incremented by INT 8;
; read/set by int 0x1a. Thus this random number generator is very slow.
;
; First we generate a 16-bit random number based on the timer counter. The code for
; this is ad hoc and messy.
push es
lx_2df:
xor ax, ax
mov es, ax
mov ax, [es:0x46c]
xor ax, [es:0x46e]
mov bx, dx
xor ax, bx
mov cx, [es:0x46d]
mov bx, 0xe21
lx_2f8:
mul bx
add ax, 0xbe0
loop lx_2f8
; Now we have the 16-bit random number in ax. If it is small enough (qqq_a <= ax),
; then we are done, otherwise we generate another random number in a busy loop, also
; waiting for int 0x8 timer to tick. Thus this random number generator is very slow.
cmp ax, [qqq_a]
ja strict short lx_2df  ; BUG: This makes the random generator very slow.
mov [qqq_w], ax  ; Save random(qqq_a+1) to qqq_w.
pop es

mov word [qqq_l], 0x0  ; L kezdőoffszet kiszámolása
mov word [qqq_l+2], 0x0
mov si, idx
add si, [qqq_w]
add si, [qqq_w]
std
lx_321:
lodsw  ; L:=IDX[W]+IDX[W-1]+...+IDX[1]
add [qqq_l], ax
adc word [qqq_l+2], byte +0x0
cmp si, idx
jne strict short lx_321
cld
push strict word 0xbfda  ; '┌┐'  ; Keret ki
call func_PrintLine
lx_33a:
; seek(f, qqq_l);
mov ax, 0x4200
mov bx, [qqq_han]
mov dx, [qqq_l]
mov cx, [qqq_l+2]
int 0x21
; blockread(f, s[1], 255, qqq_w);
mov ah, 0x3f
mov bx, [qqq_han]
mov cx, 0xff
mov dx, var_s+1
int 0x21
mov [qqq_w], ax
cmp word [qqq_w], byte +0x0  ; Stop at EOF
jne strict short lx_366
jmp strict near lx_454
lx_366:
mov bx, 0x0  ; Look for #13 to determine length(s)
mov si, var_s+1
lx_36c:
or bh, bh
jnz strict short lx_378
cmp byte [bx+si], 0xd
je strict short lx_37b
inc bx
jmp strict short lx_36c
lx_378:
jmp strict near exit  ; Error: Line longer than 255 bytes.
lx_37b:
; Beállítjuk a string hosszát
dw 0x1e88, var_s  ; mov byte [var_s], bl  ; Workaround to prevent bug in yasm-1.2.0 and yasm-1.3.0: INTERNAL ERROR at modules/arch/x86/x86expr.c, line 417: unexpected expr op
inc bx
inc bx
add [qqq_l], bx  ; inc(l,length(s)+2);
adc word [qqq_l+2], byte +0x0

; START OF ALIGN
;
; If S='' align returns TRUE else it returns FALSE. Align prints S with the
; correct color & alignment according to the control codes found in S[1, 2].

; Calculate the value of BEFORE first using up AnsiCh: #0=Left '-'=Right
; '&'=Center alignment
mov cx, ds
mov si, var_s
mov [qqq_w], si
lodsb
cmp al, 0x0
jne strict short lx_39f
mov al, 0x1
mov ds, cx
jmp strict near lx_44d  ; Empty string: do nothing but restore original CS
lx_39f:
mov byte [qqq_ansich], 0x0  ; AnsiCh is 0 by default
cmp byte [si], '-'
jne strict short lx_3bc
mov al, [si+0x1]
mov [qqq_ansich], al
add word [qqq_w], byte 2  ; If not AnsiCh<>0 the 1st 2 char won't be in the str
mov al, [si-0x1]
dec ax
dec ax
mov [si+0x1], al
lx_3bc:
mov ah, 0x0
mov ds, cx
mov bx, 0x4e
cmp byte [qqq_ansich], 0x0
jne strict short lx_3cf
mov al, 0x0
mov bx, 0x0
lx_3cf:
cmp byte [qqq_ansich], '&'
jne strict short lx_3db
mov bx, 0x27
shr ax, 1
lx_3db:
sub bx, ax
mov [qqq_before], bx
mov al, 0xb3  ; '│'  ; The line starts by this
int 0x29
cmp byte [ttt], '*'  ; Put out an ANSI EscSeq to set color if needed
je strict short lx_404
mov ah, 0x9
mov al, [qqq_ansich]
cmp al, 0x0
je strict short lx_404
add al, 0xa
mov [ttt+17+3], al
mov dx, ttt+17
int 0x21
mov byte [qqq_ansich], 0x0
lx_404:
push ds  ; Display the string "s" with "before" spaces in front of it
mov si, [qqq_w]
lodsb
mov cl, al
mov ch, 0x0
mov dx, cx
jcxz lx_438
mov cx, [qqq_before]
jcxz lx_41e
mov al, ' '
lx_41a:
int 0x29
loop lx_41a
lx_41e:
mov cx, dx
jcxz lx_427
lx_422:
lodsb
int 0x29
loop lx_422
lx_427:
mov cx, 0x4e
sub cx, [qqq_before]
sub cx, dx
jcxz lx_438
mov al, ' '
lx_434:
int 0x29
loop lx_434
lx_438:
pop ds
cmp byte [ttt], '*'  ; Restore original color via ANSI EscSeq if needed
je strict short lx_447
mov ah, 0x9
mov dx, ttt+25
int 0x21
lx_447:
mov al, 0xb3  ; '│'  ; The line ends by this, too
int 0x29
mov al, 0x0 ; The return value is FALSE
; END OF ALIGN

lx_44d:
or al, al
jnz strict short lx_454
jmp strict near lx_33a  ; Ha FALSE-t ad vissza, még van köv. sor, Különben lábléc és program vége
lx_454:
push strict word 0xd9c0  ; '└┘'
call func_PrintLine
push ds
push strict word footermsg
call func_Header
mov ah, 0x3e  ; Close(F);
mov bx, [qqq_han]
int 0x21
exit:

main_end_tpc:  ; Contains magic numbers.
leave
xor ax, ax  ;  ; @0x058F
call 0x46:0x14d  ;  ; @0x0591

stdlib_tpc:  ; Contains magic numbers.
times 10 db 0  ;  ; @0x0596
db 0xF8  ;  ; @0x05A0
db 0x60  ;  ; @0x05A1
db 0xF9  ;  ; @0x05A2
db 0x72, 0x1F  ;  ; @0x05A3
db 0x8B, 0xDC  ;  ; @0x05A5
db 0x36, 0xC5, 0x1F  ;  ; @0x05A7
db 0x83, 0xC3, 0x05  ;  ; @0x05AA
db 0x80, 0x7F, 0xFB, 0x9A  ;  ; @0x05AD
db 0x74, 0xF7  ;  ; @0x05B1
db 0x80, 0x7F, 0xFB, 0xC8  ;  ; @0x05B3
db 0x75, 0x0C  ;  ; @0x05B7
db 0xBB, 0xD2, 0x00  ;  ; @0x05B9
db 0xE8, 0x0B, 0x02  ;  ; @0x05BC
db 0xB0, 0xFE  ;  ; @0x05BF
db 0xE9, 0xFE, 0x01  ;  ; @0x05C1
db 0x61  ;  ; @0x05C4
db 0xBA, 0xA0, 0x00  ;  ; @0x05C5
db 0x8E, 0xDA  ;  ; @0x05C8
db 0x8C, 0x06, 0xC2, 0x00  ;  ; @0x05CA
db 0x33, 0xED  ;  ; @0x05CE
db 0xE8, 0x59, 0x05  ;  ; @0x05D0
db 0xE8, 0xB2, 0x00  ;  ; @0x05D3
db 0x8B, 0xC4  ;  ; @0x05D6
db 0x05, 0x13, 0x00  ;  ; @0x05D8
db 0xB1, 0x04  ;  ; @0x05DB
db 0xD3, 0xE8  ;  ; @0x05DD
db 0x8C, 0xD2  ;  ; @0x05DF
db 0x03, 0xC2  ;  ; @0x05E1
db 0xA3, 0x94, 0x00  ;  ; @0x05E3
db 0xA3, 0x96, 0x00  ;  ; @0x05E6
db 0x03, 0x06, 0x8E, 0x00  ;  ; @0x05E9
db 0xA3, 0x98, 0x00  ;  ; @0x05ED
db 0xA3, 0xA2, 0x00  ;  ; @0x05F0
db 0xA3, 0xA6, 0x00  ;  ; @0x05F3
db 0xA3, 0xAE, 0x00  ;  ; @0x05F6
db 0x8E, 0x06, 0xC2, 0x00  ;  ; @0x05F9
db 0x26, 0xA1, 0x02, 0x00  ;  ; @0x05FD
db 0xA3, 0xAA, 0x00  ;  ; @0x0601
db 0xC7, 0x06, 0xB4, 0x00, 0x0D, 0x01  ;  ; @0x0604
db 0x8C, 0x0E, 0xB6, 0x00  ;  ; @0x060A
db 0xBF, 0xA2, 0xFF  ;  ; @0x060E
db 0xBE, 0x67, 0x02  ;  ; @0x0611
db 0xB9, 0x13, 0x00  ;  ; @0x0614
db 0xB4, 0x35  ;  ; @0x0617
db 0xFC  ;  ; @0x0619
db 0x2E, 0xAC  ;  ; @0x061A
db 0xCD, 0x21  ;  ; @0x061C
db 0x89, 0x1D  ;  ; @0x061E
db 0x8C, 0x45, 0x02  ;  ; @0x0620
db 0x83, 0xC7, 0x04  ;  ; @0x0623
db 0xE2, 0xF2  ;  ; @0x0626
db 0x1E  ;  ; @0x0628
db 0x0E  ;  ; @0x0629
db 0x1F  ;  ; @0x062A
db 0xB8, 0x00, 0x25  ;  ; @0x062B
db 0xBA, 0x43, 0x01  ;  ; @0x062E
db 0xCD, 0x21  ;  ; @0x0631
db 0xBA, 0x4A, 0x01  ;  ; @0x0633
db 0xB0, 0x23  ;  ; @0x0636
db 0xCD, 0x21  ;  ; @0x0638
db 0xBA, 0x12, 0x01  ;  ; @0x063A
db 0xB0, 0x24  ;  ; @0x063D
db 0xCD, 0x21  ;  ; @0x063F
db 0xBA, 0x3B, 0x01  ;  ; @0x0641
db 0xB0, 0x3F  ;  ; @0x0644
db 0xCD, 0x21  ;  ; @0x0646
db 0x1F  ;  ; @0x0648
db 0xB8, 0xA2, 0xFD  ;  ; @0x0649
db 0x1E  ;  ; @0x064C
db 0x50  ;  ; @0x064D
db 0x1E  ;  ; @0x064E
db 0x50  ;  ; @0x064F
db 0xB8, 0x91, 0x02  ;  ; @0x0650
db 0x0E  ;  ; @0x0653
db 0x50  ;  ; @0x0654
db 0x0E  ;  ; @0x0655
db 0xE8, 0x08, 0x03  ;  ; @0x0656
db 0x0E  ;  ; @0x0659
db 0xE8, 0x83, 0x03  ;  ; @0x065A
db 0xB8, 0xA2, 0xFE  ;  ; @0x065D
db 0x1E  ;  ; @0x0660
db 0x50  ;  ; @0x0661
db 0x1E  ;  ; @0x0662
db 0x50  ;  ; @0x0663
db 0xB8, 0x91, 0x02  ;  ; @0x0664
db 0x0E  ;  ; @0x0667
db 0x50  ;  ; @0x0668
db 0x0E  ;  ; @0x0669
db 0xE8, 0xF4, 0x02  ;  ; @0x066A
db 0x0E  ;  ; @0x066D
db 0xE8, 0x77, 0x03  ;  ; @0x066E
db 0xCB  ;  ; @0x0671
db 0x43  ;  ; @0x0672
db 0x50  ;  ; @0x0673
db 0x55  ;  ; @0x0674
db 0x20, 0x3E, 0x20, 0x38  ;  ; @0x0675
db 0x30, 0x38  ;  ; @0x0679
db 0x36, 0x20, 0x72, 0x65  ;  ; @0x067B
db 0x71, 0x75  ;  ; @0x067F
db 0x69, 0x72, 0x65, 0x64, 0x0D  ;  ; @0x0681
db 0x0A, 0x00  ;  ; @0x0686
db 0x33, 0xC0  ;  ; @0x0688
db 0x9C  ;  ; @0x068A
db 0x5B  ;  ; @0x068B
db 0x80, 0xE7, 0x0F  ;  ; @0x068C
db 0x53  ;  ; @0x068F
db 0x9D  ;  ; @0x0690
db 0x9C  ;  ; @0x0691
db 0x59  ;  ; @0x0692
db 0x80, 0xE5, 0xF0  ;  ; @0x0693
db 0x80, 0xFD, 0xF0  ;  ; @0x0696
db 0x74, 0x0E  ;  ; @0x0699
db 0x40  ;  ; @0x069B
db 0x80, 0xCF, 0xF0  ;  ; @0x069C
db 0x53  ;  ; @0x069F
db 0x9D  ;  ; @0x06A0
db 0x9C  ;  ; @0x06A1
db 0x59  ;  ; @0x06A2
db 0x80, 0xE5, 0xF0  ;  ; @0x06A3
db 0x74, 0x01  ;  ; @0x06A6
db 0x40  ;  ; @0x06A8
db 0xA2, 0xD6, 0x00  ;  ; @0x06A9
db 0xC3  ;  ; @0x06AC
db 0x33, 0xC0  ;  ; @0x06AD
db 0xCA, 0x02, 0x00  ;  ; @0x06AF
db 0xFB  ;  ; @0x06B2
db 0x83, 0xC4, 0x06  ;  ; @0x06B3
db 0x58  ;  ; @0x06B6
db 0x83, 0xE7, 0x1F  ;  ; @0x06B7
db 0x81, 0xC7, 0x96, 0x00  ;  ; @0x06BA
db 0x80, 0xFC, 0x39  ;  ; @0x06BE
db 0x73, 0x03  ;  ; @0x06C1
db 0xBF, 0xFF, 0xFF  ;  ; @0x06C3
db 0x57  ;  ; @0x06C6
db 0xB4, 0x54  ;  ; @0x06C7
db 0xCD, 0x21  ;  ; @0x06C9
db 0x8B, 0xEC  ;  ; @0x06CB
db 0x80, 0x4E, 0x16, 0x01  ;  ; @0x06CD
db 0x58  ;  ; @0x06D1
db 0x5B  ;  ; @0x06D2
db 0x59  ;  ; @0x06D3
db 0x5A  ;  ; @0x06D4
db 0x5E  ;  ; @0x06D5
db 0x5F  ;  ; @0x06D6
db 0x5D  ;  ; @0x06D7
db 0x1F  ;  ; @0x06D8
db 0x07  ;  ; @0x06D9
db 0xCF  ;  ; @0x06DA
db 0xB8, 0xD0, 0x00  ;  ; @0x06DB
db 0x83, 0xC4, 0x06  ;  ; @0x06DE
db 0xEB, 0x03  ;  ; @0x06E1
db 0xB8, 0xC8, 0x00  ;  ; @0x06E3
db 0x59  ;  ; @0x06E6
db 0x5B  ;  ; @0x06E7
db 0xEB, 0x07  ;  ; @0x06E8
db 0xB8, 0xFF, 0x00  ;  ; @0x06EA
db 0x33, 0xC9  ;  ; @0x06ED
db 0x33, 0xDB  ;  ; @0x06EF
db 0xBA, 0xA0, 0x00  ;  ; @0x06F1
db 0x8E, 0xDA  ;  ; @0x06F4
db 0xFB  ;  ; @0x06F6
db 0xA3, 0xBC, 0x00  ;  ; @0x06F7
db 0x8B, 0xC1  ;  ; @0x06FA
db 0x0B, 0xC3  ;  ; @0x06FC
db 0x74, 0x3D  ;  ; @0x06FE
db 0xA1, 0x9A, 0x00  ;  ; @0x0700
db 0x85, 0xC0  ;  ; @0x0703
db 0x74, 0x2F  ;  ; @0x0705
db 0x8E, 0xC0  ;  ; @0x0707
db 0x26, 0xA1, 0x10, 0x00  ;  ; @0x0709
db 0x85, 0xC0  ;  ; @0x070D
db 0x74, 0x1B  ;  ; @0x070F
db 0x2B, 0xC3  ;  ; @0x0711
db 0x77, 0x17  ;  ; @0x0713
db 0xF7, 0xD8  ;  ; @0x0715
db 0x3D, 0x00, 0x10  ;  ; @0x0717
db 0x73, 0x10  ;  ; @0x071A
db 0xBA, 0x10, 0x00  ;  ; @0x071C
db 0xF7, 0xE2  ;  ; @0x071F
db 0x03, 0xC1  ;  ; @0x0721
db 0x72, 0x07  ;  ; @0x0723
db 0x26, 0x3B, 0x06, 0x08, 0x00  ;  ; @0x0725
db 0x72, 0x06  ;  ; @0x072A
db 0x26, 0xA1, 0x14, 0x00  ;  ; @0x072C
db 0xEB, 0xD1  ;  ; @0x0730
db 0x8B, 0xC8  ;  ; @0x0732
db 0x8C, 0xC3  ;  ; @0x0734
db 0x2B, 0x1E, 0xC2, 0x00  ;  ; @0x0736
db 0x83, 0xEB, 0x10  ;  ; @0x073A
db 0x89, 0x0E, 0xBE, 0x00  ;  ; @0x073D
db 0x89, 0x1E, 0xC0, 0x00  ;  ; @0x0741
db 0xC4, 0x1E, 0xB8, 0x00  ;  ; @0x0745
db 0x8C, 0xC0  ;  ; @0x0749
db 0x0B, 0xC3  ;  ; @0x074B
db 0x74, 0x13  ;  ; @0x074D
db 0x33, 0xC0  ;  ; @0x074F
db 0xA3, 0xB8, 0x00  ;  ; @0x0751
db 0xA3, 0xBA, 0x00  ;  ; @0x0754
db 0xA3, 0xC6, 0x00  ;  ; @0x0757
db 0xB8, 0xA5, 0x01  ;  ; @0x075A
db 0x0E  ;  ; @0x075D
db 0x50  ;  ; @0x075E
db 0x06  ;  ; @0x075F
db 0x53  ;  ; @0x0760
db 0xCB  ;  ; @0x0761
db 0xB8, 0xA2, 0xFD  ;  ; @0x0762
db 0x1E  ;  ; @0x0765
db 0x50  ;  ; @0x0766
db 0x0E  ;  ; @0x0767
db 0xE8, 0xD9, 0x02  ;  ; @0x0768
db 0xB8, 0xA2, 0xFE  ;  ; @0x076B
db 0x1E  ;  ; @0x076E
db 0x50  ;  ; @0x076F
db 0x0E  ;  ; @0x0770
db 0xE8, 0xD0, 0x02  ;  ; @0x0771
db 0xBF, 0xA2, 0xFF  ;  ; @0x0774
db 0xBE, 0x67, 0x02  ;  ; @0x0777
db 0xB9, 0x13, 0x00  ;  ; @0x077A
db 0xFC  ;  ; @0x077D
db 0x2E, 0xAC  ;  ; @0x077E
db 0xB4, 0x25  ;  ; @0x0780
db 0x1E  ;  ; @0x0782
db 0xC5, 0x15  ;  ; @0x0783
db 0xCD, 0x21  ;  ; @0x0785
db 0x1F  ;  ; @0x0787
db 0x83, 0xC7, 0x04  ;  ; @0x0788
db 0xE2, 0xF0  ;  ; @0x078B
db 0xA1, 0xBE, 0x00  ;  ; @0x078D
db 0x0B, 0x06, 0xC0, 0x00  ;  ; @0x0790
db 0x74, 0x29  ;  ; @0x0794
db 0xBB, 0x7A, 0x02  ;  ; @0x0796
db 0xE8, 0x2E, 0x00  ;  ; @0x0799
db 0xA1, 0xBC, 0x00  ;  ; @0x079C
db 0xE8, 0x30, 0x00  ;  ; @0x079F
db 0xBB, 0x89, 0x02  ;  ; @0x07A2
db 0xE8, 0x22, 0x00  ;  ; @0x07A5
db 0xA1, 0xC0, 0x00  ;  ; @0x07A8
db 0xE8, 0x3A, 0x00  ;  ; @0x07AB
db 0xB0, 0x3A  ;  ; @0x07AE
db 0xE8, 0x4D, 0x00  ;  ; @0x07B0
db 0xA1, 0xBE, 0x00  ;  ; @0x07B3
db 0xE8, 0x2F, 0x00  ;  ; @0x07B6
db 0xBB, 0x8E, 0x02  ;  ; @0x07B9
db 0xE8, 0x0B, 0x00  ;  ; @0x07BC
db 0xA0, 0xBC, 0x00  ;  ; @0x07BF
db 0xB4, 0x4C  ;  ; @0x07C2
db 0xCD, 0x21  ;  ; @0x07C4
db 0xE8, 0x37, 0x00  ;  ; @0x07C6
db 0x43  ;  ; @0x07C9
db 0x2E, 0x8A, 0x07  ;  ; @0x07CA
db 0x84, 0xC0  ;  ; @0x07CD
db 0x75, 0xF5  ;  ; @0x07CF
db 0xC3  ;  ; @0x07D1
db 0xD4, 0x0A  ;  ; @0x07D2
db 0x50  ;  ; @0x07D4
db 0x8A, 0xC4  ;  ; @0x07D5
db 0xD4, 0x0A  ;  ; @0x07D7
db 0x50  ;  ; @0x07D9
db 0x8A, 0xC4  ;  ; @0x07DA
db 0xE8, 0x05, 0x00  ;  ; @0x07DC
db 0x58  ;  ; @0x07DF
db 0xE8, 0x01, 0x00  ;  ; @0x07E0
db 0x58  ;  ; @0x07E3
db 0x04, 0x30  ;  ; @0x07E4
db 0xEB, 0x18  ;  ; @0x07E6
db 0x50  ;  ; @0x07E8
db 0x8A, 0xC4  ;  ; @0x07E9
db 0xE8, 0x01, 0x00  ;  ; @0x07EB
db 0x58  ;  ; @0x07EE
db 0xD4, 0x10  ;  ; @0x07EF
db 0x50  ;  ; @0x07F1
db 0x8A, 0xC4  ;  ; @0x07F2
db 0xE8, 0x01, 0x00  ;  ; @0x07F4
db 0x58  ;  ; @0x07F7
db 0x04, 0x30  ;  ; @0x07F8
db 0x3C, 0x3A  ;  ; @0x07FA
db 0x72, 0x02  ;  ; @0x07FC
db 0x04, 0x07  ;  ; @0x07FE
db 0x8A, 0xD0  ;  ; @0x0800
db 0xB4, 0x06  ;  ; @0x0802
db 0xCD, 0x21  ;  ; @0x0804
db 0xC3  ;  ; @0x0806
db 0x00, 0x02  ;  ; @0x0807
db 0x1B, 0x21  ;  ; @0x0809
db 0x23, 0x24  ;  ; @0x080B
db 0x34, 0x35  ;  ; @0x080D
db 0x36, 0x37  ;  ; @0x080F
db 0x38, 0x39  ;  ; @0x0811
db 0x3A, 0x3B  ;  ; @0x0813
db 0x3C, 0x3D  ;  ; @0x0815
db 0x3E, 0x3F  ;  ; @0x0817
db 0x75, 0x52  ;  ; @0x0819
db 0x75, 0x6E  ;  ; @0x081B
db 0x74, 0x69  ;  ; @0x081D
db 0x6D  ;  ; @0x081F
db 0x65, 0x20, 0x65, 0x72  ;  ; @0x0820
db 0x72, 0x6F  ;  ; @0x0824
db 0x72, 0x20  ;  ; @0x0826
db 0x00, 0x20  ;  ; @0x0828
db 0x61  ;  ; @0x082A
db 0x74, 0x20  ;  ; @0x082B
db 0x00, 0x2E, 0x0D, 0x0A  ;  ; @0x082D
db 0x00, 0x50, 0x6F  ;  ; @0x0831
db 0x72, 0x74  ;  ; @0x0834
db 0x69, 0x6F, 0x6E, 0x73, 0x20  ;  ; @0x0836
db 0x43  ;  ; @0x083B
db 0x6F  ;  ; @0x083C
db 0x70, 0x79  ;  ; @0x083D
db 0x72, 0x69  ;  ; @0x083F
db 0x67, 0x68, 0x74, 0x20  ;  ; @0x0841
db 0x28, 0x63, 0x29  ;  ; @0x0845
db 0x20, 0x31  ;  ; @0x0848
db 0x39, 0x38  ;  ; @0x084A
db 0x33, 0x2C  ;  ; @0x084C
db 0x39, 0x32  ;  ; @0x084E
db 0x20, 0x42, 0x6F  ;  ; @0x0850
db 0x72, 0x6C  ;  ; @0x0853
db 0x61  ;  ; @0x0855
db 0x6E  ;  ; @0x0856
db 0x64, 0x20, 0x26, 0x20, 0x31  ;  ; @0x0857
db 0x39, 0x38  ;  ; @0x085C
db 0x38, 0x2C  ;  ; @0x085E
db 0x31, 0x39  ;  ; @0x0860
db 0x39, 0x34  ;  ; @0x0862
db 0x20, 0x4E, 0x6F  ;  ; @0x0864
db 0x72, 0x62  ;  ; @0x0867
db 0x65, 0x72, 0x74  ;  ; @0x0869
db 0x20, 0x4A, 0x75  ;  ; @0x086C
db 0x66, 0x66, 0x61  ;  ; @0x086F
db 0x87, 0xDB  ;  ; @0x0872
db 0x8B, 0xDC  ;  ; @0x0874
db 0x1E  ;  ; @0x0876
db 0x36, 0xC5, 0x7F, 0x04  ;  ; @0x0877
db 0x33, 0xC9  ;  ; @0x087B
db 0x89, 0x0D  ;  ; @0x087D
db 0xB8, 0x00, 0x3D  ;  ; @0x087F
db 0x81, 0x7D, 0x02, 0xB1, 0xD7  ;  ; @0x0882
db 0x74, 0x0D  ;  ; @0x0887
db 0xB0, 0x02  ;  ; @0x0889
db 0xFF, 0x05  ;  ; @0x088B
db 0x81, 0x7D, 0x02, 0xB3, 0xD7  ;  ; @0x088D
db 0x74, 0x02  ;  ; @0x0892
db 0xB4, 0x3C  ;  ; @0x0894
db 0x80, 0x7D, 0x30, 0x00  ;  ; @0x0896
db 0x74, 0x09  ;  ; @0x089A
db 0x8D, 0x55, 0x30  ;  ; @0x089C
db 0xCD, 0x21  ;  ; @0x089F
db 0x72, 0x5A  ;  ; @0x08A1
db 0x89, 0x05  ;  ; @0x08A3
db 0xB8, 0xF8, 0x04  ;  ; @0x08A5
db 0xBA, 0x46, 0x00  ;  ; @0x08A8
db 0x33, 0xC9  ;  ; @0x08AB
db 0x33, 0xDB  ;  ; @0x08AD
db 0x81, 0x7D, 0x02, 0xB1, 0xD7  ;  ; @0x08AF
db 0x74, 0x2F  ;  ; @0x08B4
db 0x8B, 0x1D  ;  ; @0x08B6
db 0xB8, 0x00, 0x44  ;  ; @0x08B8
db 0xCD, 0x21  ;  ; @0x08BB
db 0xF6, 0xC2, 0x80  ;  ; @0x08BD
db 0xB8, 0x50, 0x05  ;  ; @0x08C0
db 0xBA, 0x46, 0x00  ;  ; @0x08C3
db 0x8B, 0xC8  ;  ; @0x08C6
db 0x8B, 0xDA  ;  ; @0x08C8
db 0x75, 0x14  ;  ; @0x08CA
db 0x81, 0x7D, 0x02, 0xB3, 0xD7  ;  ; @0x08CC
db 0x75, 0x03  ;  ; @0x08D1
db 0xE8, 0x2E, 0x00  ;  ; @0x08D3
db 0xB8, 0x28, 0x05  ;  ; @0x08D6
db 0xBA, 0x46, 0x00  ;  ; @0x08D9
db 0x33, 0xC9  ;  ; @0x08DC
db 0x33, 0xDB  ;  ; @0x08DE
db 0xC7, 0x45, 0x02, 0xB2, 0xD7  ;  ; @0x08E0
db 0x89, 0x45, 0x14  ;  ; @0x08E5
db 0x89, 0x55, 0x16  ;  ; @0x08E8
db 0x89, 0x4D, 0x18  ;  ; @0x08EB
db 0x89, 0x5D, 0x1A  ;  ; @0x08EE
db 0xC7, 0x45, 0x1C, 0x70, 0x05  ;  ; @0x08F1
db 0xC7, 0x45, 0x1E, 0x46, 0x00  ;  ; @0x08F6
db 0x33, 0xC0  ;  ; @0x08FB
db 0x1F  ;  ; @0x08FD
db 0xCA, 0x04, 0x00  ;  ; @0x08FE
db 0x87, 0xDB  ;  ; @0x0901
db 0x90  ;  ; @0x0903
db 0x33, 0xD2  ;  ; @0x0904
db 0x33, 0xC9  ;  ; @0x0906
db 0x8B, 0x1D  ;  ; @0x0908
db 0xB8, 0x02, 0x42  ;  ; @0x090A
db 0xCD, 0x21  ;  ; @0x090D
db 0x2D, 0x80, 0x00  ;  ; @0x090F
db 0x83, 0xDA, 0x00  ;  ; @0x0912
db 0x73, 0x04  ;  ; @0x0915
db 0x33, 0xC0  ;  ; @0x0917
db 0x33, 0xD2  ;  ; @0x0919
db 0x8B, 0xCA  ;  ; @0x091B
db 0x8B, 0xD0  ;  ; @0x091D
db 0x8B, 0x1D  ;  ; @0x091F
db 0xB8, 0x00, 0x42  ;  ; @0x0921
db 0xCD, 0x21  ;  ; @0x0924
db 0x8D, 0x95, 0x80, 0x00  ;  ; @0x0926
db 0xB9, 0x80, 0x00  ;  ; @0x092A
db 0x8B, 0x1D  ;  ; @0x092D
db 0xB4, 0x3F  ;  ; @0x092F
db 0xCD, 0x21  ;  ; @0x0931
db 0x73, 0x02  ;  ; @0x0933
db 0x33, 0xC0  ;  ; @0x0935
db 0x33, 0xDB  ;  ; @0x0937
db 0x3B, 0xD8  ;  ; @0x0939
db 0x74, 0x20  ;  ; @0x093B
db 0x80, 0xB9, 0x80, 0x00, 0x1A  ;  ; @0x093D
db 0x74, 0x03  ;  ; @0x0942
db 0x43  ;  ; @0x0944
db 0xEB, 0xF2  ;  ; @0x0945
db 0x8B, 0xD3  ;  ; @0x0947
db 0x2B, 0xD0  ;  ; @0x0949
db 0xB9, 0xFF, 0xFF  ;  ; @0x094B
db 0x8B, 0x1D  ;  ; @0x094E
db 0xB8, 0x02, 0x42  ;  ; @0x0950
db 0xCD, 0x21  ;  ; @0x0953
db 0x33, 0xC9  ;  ; @0x0955
db 0x8B, 0x1D  ;  ; @0x0957
db 0xB4, 0x40  ;  ; @0x0959
db 0xCD, 0x21  ;  ; @0x095B
db 0xC3  ;  ; @0x095D
db 0x87, 0xDB  ;  ; @0x095E
db 0xBA, 0x33, 0xD2  ;  ; @0x0960
db 0x8B, 0xDC  ;  ; @0x0963
db 0x1E  ;  ; @0x0965
db 0x36, 0xC4, 0x7F, 0x08  ;  ; @0x0966
db 0x36, 0xC5, 0x77, 0x04  ;  ; @0x096A
db 0xFC  ;  ; @0x096E
db 0x33, 0xC0  ;  ; @0x096F
db 0xAB  ;  ; @0x0971
db 0xB8, 0xB0, 0xD7  ;  ; @0x0972
db 0xAB  ;  ; @0x0975
db 0xB8, 0x80, 0x00  ;  ; @0x0976
db 0xAB  ;  ; @0x0979
db 0x33, 0xC0  ;  ; @0x097A
db 0xAB  ;  ; @0x097C
db 0xAB  ;  ; @0x097D
db 0xAB  ;  ; @0x097E
db 0x8D, 0x45, 0x74  ;  ; @0x097F
db 0xAB  ;  ; @0x0982
db 0x8C, 0xC0  ;  ; @0x0983
db 0xAB  ;  ; @0x0985
db 0xB8, 0xD4, 0x02  ;  ; @0x0986
db 0xAB  ;  ; @0x0989
db 0xB8, 0x46, 0x00  ;  ; @0x098A
db 0xAB  ;  ; @0x098D
db 0x33, 0xC0  ;  ; @0x098E
db 0xB9, 0x0E, 0x00  ;  ; @0x0990
db 0xF3, 0xAB  ;  ; @0x0993
db 0xB9, 0x4F, 0x00  ;  ; @0x0995
db 0x0B, 0xD2  ;  ; @0x0998
db 0x75, 0x09  ;  ; @0x099A
db 0xAC  ;  ; @0x099C
db 0x3A, 0xC8  ;  ; @0x099D
db 0x76, 0x04  ;  ; @0x099F
db 0x8A, 0xC8  ;  ; @0x09A1
db 0xE3, 0x08  ;  ; @0x09A3
db 0xAC  ;  ; @0x09A5
db 0x0A, 0xC0  ;  ; @0x09A6
db 0x74, 0x03  ;  ; @0x09A8
db 0xAA  ;  ; @0x09AA
db 0xE2, 0xF8  ;  ; @0x09AB
db 0x32, 0xC0  ;  ; @0x09AD
db 0xAA  ;  ; @0x09AF
db 0x1F  ;  ; @0x09B0
db 0xCA, 0x08, 0x00  ;  ; @0x09B1
db 0x8B, 0xDC  ;  ; @0x09B4
db 0x36, 0xC4, 0x7F, 0x0A  ;  ; @0x09B6
db 0x36, 0x8B, 0x47, 0x04  ;  ; @0x09BA
db 0x26, 0x89, 0x45, 0x04  ;  ; @0x09BE
db 0x36, 0x8B, 0x47, 0x06  ;  ; @0x09C2
db 0x26, 0x89, 0x45, 0x0C  ;  ; @0x09C6
db 0x36, 0x8B, 0x47, 0x08  ;  ; @0x09CA
db 0x26, 0x89, 0x45, 0x0E  ;  ; @0x09CE
db 0x33, 0xC0  ;  ; @0x09D2
db 0x26, 0x89, 0x45, 0x08  ;  ; @0x09D4
db 0x26, 0x89, 0x45, 0x0A  ;  ; @0x09D8
db 0xCA, 0x0A, 0x00  ;  ; @0x09DC
db 0x90  ;  ; @0x09DF
db 0xBA, 0xB1, 0xD7  ;  ; @0x09E0
db 0xEB, 0x0F  ;  ; @0x09E3
db 0x87, 0xDB  ;  ; @0x09E5
db 0x90  ;  ; @0x09E7
db 0xBA, 0xB2, 0xD7  ;  ; @0x09E8
db 0xEB, 0x07  ;  ; @0x09EB
db 0x87, 0xDB  ;  ; @0x09ED
db 0x90  ;  ; @0x09EF
db 0xBA, 0xB3, 0xD7  ;  ; @0x09F0
db 0x90  ;  ; @0x09F3
db 0x55  ;  ; @0x09F4
db 0x8B, 0xEC  ;  ; @0x09F5
db 0xC4, 0x7E, 0x06  ;  ; @0x09F7
db 0x26, 0x8B, 0x45, 0x02  ;  ; @0x09FA
db 0x3D, 0xB1, 0xD7  ;  ; @0x09FE
db 0x74, 0x12  ;  ; @0x0A01
db 0x3D, 0xB2, 0xD7  ;  ; @0x0A03
db 0x74, 0x0D  ;  ; @0x0A06
db 0x3D, 0xB0, 0xD7  ;  ; @0x0A08
db 0x74, 0x10  ;  ; @0x0A0B
db 0xC7, 0x06, 0xC6, 0x00, 0x66, 0x00  ;  ; @0x0A0D
db 0xEB, 0x24  ;  ; @0x0A13
db 0x52  ;  ; @0x0A15
db 0x06  ;  ; @0x0A16
db 0x57  ;  ; @0x0A17
db 0x0E  ;  ; @0x0A18
db 0xE8, 0x28, 0x00  ;  ; @0x0A19
db 0x5A  ;  ; @0x0A1C
db 0x33, 0xC0  ;  ; @0x0A1D
db 0x26, 0x89, 0x55, 0x02  ;  ; @0x0A1F
db 0x26, 0x89, 0x45, 0x08  ;  ; @0x0A23
db 0x26, 0x89, 0x45, 0x0A  ;  ; @0x0A27
db 0xBB, 0x10, 0x00  ;  ; @0x0A2B
db 0xE8, 0x53, 0x00  ;  ; @0x0A2E
db 0x74, 0x06  ;  ; @0x0A31
db 0x26, 0xC7, 0x45, 0x02, 0xB0, 0xD7  ;  ; @0x0A33
db 0x5D  ;  ; @0x0A39
db 0xCA, 0x04, 0x00  ;  ; @0x0A3A
db 0x87, 0xDB  ;  ; @0x0A3D
db 0x90  ;  ; @0x0A3F
db 0xB0, 0x00  ;  ; @0x0A40
db 0xEB, 0x04  ;  ; @0x0A42
db 0xB0, 0x01  ;  ; @0x0A44
db 0x87, 0xDB  ;  ; @0x0A46
db 0x55  ;  ; @0x0A48
db 0x8B, 0xEC  ;  ; @0x0A49
db 0xC4, 0x7E, 0x06  ;  ; @0x0A4B
db 0x26, 0x81, 0x7D, 0x02, 0xB1, 0xD7  ;  ; @0x0A4E
db 0x74, 0x18  ;  ; @0x0A54
db 0x26, 0x81, 0x7D, 0x02, 0xB2, 0xD7  ;  ; @0x0A56
db 0x74, 0x08  ;  ; @0x0A5C
db 0xC7, 0x06, 0xC6, 0x00, 0x67, 0x00  ;  ; @0x0A5E
db 0xEB, 0x18  ;  ; @0x0A64
db 0x50  ;  ; @0x0A66
db 0xBB, 0x14, 0x00  ;  ; @0x0A67
db 0xE8, 0x17, 0x00  ;  ; @0x0A6A
db 0x58  ;  ; @0x0A6D
db 0x0A, 0xC0  ;  ; @0x0A6E
db 0x74, 0x0C  ;  ; @0x0A70
db 0xBB, 0x1C, 0x00  ;  ; @0x0A72
db 0xE8, 0x0C, 0x00  ;  ; @0x0A75
db 0x26, 0xC7, 0x45, 0x02, 0xB0, 0xD7  ;  ; @0x0A78
db 0x5D  ;  ; @0x0A7E
db 0xCA, 0x04, 0x00  ;  ; @0x0A7F
db 0x87, 0xDB  ;  ; @0x0A82
db 0x06  ;  ; @0x0A84
db 0x57  ;  ; @0x0A85
db 0x06  ;  ; @0x0A86
db 0x57  ;  ; @0x0A87
db 0x26, 0xFF, 0x19  ;  ; @0x0A88
db 0x0B, 0xC0  ;  ; @0x0A8B
db 0x74, 0x03  ;  ; @0x0A8D
db 0xA3, 0xC6, 0x00  ;  ; @0x0A8F
db 0x5F  ;  ; @0x0A92
db 0x07  ;  ; @0x0A93
db 0xC3  ;  ; @0x0A94
db 0x87, 0xDB  ;  ; @0x0A95
db 0x90  ;  ; @0x0A97
db 0x8B, 0xDC  ;  ; @0x0A98
db 0x1E  ;  ; @0x0A9A
db 0x36, 0xC4, 0x7F, 0x04  ;  ; @0x0A9B
db 0x26, 0xC5, 0x55, 0x0C  ;  ; @0x0A9F
db 0x26, 0x8B, 0x4D, 0x04  ;  ; @0x0AA3
db 0x26, 0x8B, 0x1D  ;  ; @0x0AA7
db 0xB4, 0x3F  ;  ; @0x0AAA
db 0xCD, 0x21  ;  ; @0x0AAC
db 0x72, 0x10  ;  ; @0x0AAE
db 0x26, 0x89, 0x45, 0x0A  ;  ; @0x0AB0
db 0x33, 0xC0  ;  ; @0x0AB4
db 0x26, 0xC7, 0x45, 0x08, 0x00, 0x00  ;  ; @0x0AB6
db 0x1F  ;  ; @0x0ABC
db 0xCA, 0x04, 0x00  ;  ; @0x0ABD
db 0x26, 0xC7, 0x45, 0x0A, 0x00, 0x00  ;  ; @0x0AC0
db 0xEB, 0xEE  ;  ; @0x0AC6
db 0x8B, 0xDC  ;  ; @0x0AC8
db 0x1E  ;  ; @0x0ACA
db 0x36, 0xC4, 0x7F, 0x04  ;  ; @0x0ACB
db 0x26, 0xC5, 0x55, 0x0C  ;  ; @0x0ACF
db 0x33, 0xC9  ;  ; @0x0AD3
db 0x26, 0x87, 0x4D, 0x08  ;  ; @0x0AD5
db 0x26, 0x8B, 0x1D  ;  ; @0x0AD9
db 0xB4, 0x40  ;  ; @0x0ADC
db 0xCD, 0x21  ;  ; @0x0ADE
db 0x72, 0x07  ;  ; @0x0AE0
db 0x2B, 0xC1  ;  ; @0x0AE2
db 0x74, 0x03  ;  ; @0x0AE4
db 0xB8, 0x65, 0x00  ;  ; @0x0AE6
db 0x1F  ;  ; @0x0AE9
db 0xCA, 0x04, 0x00  ;  ; @0x0AEA
db 0x87, 0xDB  ;  ; @0x0AED
db 0x90  ;  ; @0x0AEF
db 0x8B, 0xDC  ;  ; @0x0AF0
db 0x1E  ;  ; @0x0AF2
db 0x36, 0xC4, 0x7F, 0x04  ;  ; @0x0AF3
db 0x26, 0xC5, 0x55, 0x0C  ;  ; @0x0AF7
db 0x33, 0xC9  ;  ; @0x0AFB
db 0x26, 0x87, 0x4D, 0x08  ;  ; @0x0AFD
db 0x26, 0x8B, 0x1D  ;  ; @0x0B01
db 0xB4, 0x40  ;  ; @0x0B04
db 0xCD, 0x21  ;  ; @0x0B06
db 0x72, 0x02  ;  ; @0x0B08
db 0x33, 0xC0  ;  ; @0x0B0A
db 0x1F  ;  ; @0x0B0C
db 0xCA, 0x04, 0x00  ;  ; @0x0B0D
db 0x8B, 0xDC  ;  ; @0x0B10
db 0x36, 0xC4, 0x7F, 0x04  ;  ; @0x0B12
db 0x26, 0x8B, 0x1D  ;  ; @0x0B16
db 0x83, 0xFB, 0x04  ;  ; @0x0B19
db 0x76, 0x06  ;  ; @0x0B1C
db 0xB4, 0x3E  ;  ; @0x0B1E
db 0xCD, 0x21  ;  ; @0x0B20
db 0x72, 0x02  ;  ; @0x0B22
db 0x33, 0xC0  ;  ; @0x0B24
db 0xCA, 0x04, 0x00  ;  ; @0x0B26
db 0x87, 0xDB  ;  ; @0x0B29
db 0x90  ;  ; @0x0B2B
db 0xBF, 0xDA, 0x00  ;  ; @0x0B2C
db 0x1E  ;  ; @0x0B2F
db 0x07  ;  ; @0x0B30
db 0xB9, 0xEE, 0xFF  ;  ; @0x0B31
db 0x2B, 0xCF  ;  ; @0x0B34
db 0xD1, 0xE9  ;  ; @0x0B36
db 0x33, 0xC0  ;  ; @0x0B38
db 0xFC  ;  ; @0x0B3A
db 0xF3, 0xAB  ;  ; @0x0B3B
db 0xC3  ;  ; @0x0B3D
db 0x87, 0xDB  ;  ; @0x0B3E

times ((_code-$) & 15) nop  ; Align to paragraph (16) boundary with nop.
seg_delta equ (($-_code) >> 4) + 0x10

_data:
zerow_tpc_in_data: dw 0
ttt_in_data: db 27, '[44;30m$', 27, '[0m', 27, '[K$', 27, '[30;1m$', 27, '[0m$'
ttt equ ttt_in_data-_data  ; Because of seg_delta.
txtfn_in_data: db 'QUOTE.TXT', 0, 0, 0, 0
txtfn equ txtfn_in_data-_data  ; Because of seg_delta.
idxfn_in_data: db 'QUOTE.IDX', 0, 0, 0, 0
idxfn equ idxfn_in_data-_data  ; Because of seg_delta.
; Must be long enough (23 bytes) for overlap with qqq_... .
headermsg_in_data: db 35, 'PotterSoftware Quote Displayer 2.33'  ; !! Upgrade version number.
headermsg equ headermsg_in_data-_data  ; Because of seg_delta.
footermsg_in_data: db 44, 'Greetings to RP,TT,FZ/S,Blala,OGY,FC,VR,JCR.'
footermsg equ footermsg_in_data-_data  ; Because of seg_delta.
_data_end:

; _bss: (Uninitialized data.)
full equ 16384  ; Just a size.
PrefixSeg equ 0xc2  ; Contains magic numbers.
_bss equ 0xda  ; Contains magic numbers.
buf equ _bss  ; array[0..full+4] of char;
var_s equ buf  ; string; overlaps buf
idx equ buf+full+4+1  ; array[0..24160] of word;
qqq_a equ headermsg  ; word; overlaps headermsg.
qqq_b equ qqq_a+2  ; word; overlaps headermsg.
qqq_w equ qqq_b+2  ; word; overlaps headermsg.
qqq_l equ qqq_w+2  ; longint; overlaps headermsg.
qqq_max equ qqq_l+4  ; longint; overlaps headermsg.
qqq_oldl equ qqq_max+4  ; longint; overlaps headermsg.
qqq_xch equ qqq_oldl+4  ; char; overlaps headermsg. Contains the command-line argument character: 0 for missing or space (' '), otherwise uppercased ('A' to 'C').
qqq_before equ qqq_xch+1  ; word; overlaps headermsg, Not aligned.
qqq_ansich equ qqq_before+2  ; char; overlaps headermsg.
qqq_han equ qqq_ansich+1  ; word; overlaps headermsg. Filehandle.

_data_tpc:
times 19 db 0  ;  ; @0x0BCB
dw -1
times 37 db 0
db 2
times 7 db 0
db 0x10, 0x40, 0, 0, 0xA0, 0, 0xB0, 0, 0xB8, 0, 0, 0x02  ;  ; @0x0C0D
times 7 db 0
